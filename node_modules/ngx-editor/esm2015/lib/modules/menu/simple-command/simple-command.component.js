import { Component, HostBinding, Input } from '@angular/core';
import { SimpleCommands } from '../MenuCommands';
import Icon from '../../../icons';
import { NgxEditorService } from '../../../editor.service';
import { SharedService } from '../../../services/shared/shared.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../../../editor.service';
import * as ɵngcc2 from '../../../services/shared/shared.service';
import * as ɵngcc3 from '../../../pipes/sanitize/sanitize-html.pipe';
export class SimpleCommandComponent {
    constructor(ngxeService, sharedService) {
        this.ngxeService = ngxeService;
        this.sharedService = sharedService;
        this.isActive = false;
        this.disabled = false;
        this.update = (view) => {
            const { state } = view;
            const command = SimpleCommands.get(this.name);
            this.isActive = command.isActive(state);
            this.disabled = !command.canExecute(state);
        };
        this.editorView = this.sharedService.view;
        this.pluginUpdateSubscription = this.sharedService.plugin.update.subscribe((view) => {
            this.update(view);
        });
    }
    toggle(e) {
        e.preventDefault();
        if (e.button !== 0) {
            return;
        }
        const { state, dispatch } = this.editorView;
        const command = SimpleCommands.get(this.name);
        command.execute(state, dispatch);
    }
    getTitle(name) {
        return this.ngxeService.locals.get(name);
    }
    ngOnInit() {
        this.html = Icon.get(this.name);
    }
    ngOnDestroy() {
        this.pluginUpdateSubscription.unsubscribe();
    }
}
SimpleCommandComponent.ɵfac = function SimpleCommandComponent_Factory(t) { return new (t || SimpleCommandComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgxEditorService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.SharedService)); };
SimpleCommandComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SimpleCommandComponent, selectors: [["ngx-simple-command"]], hostVars: 4, hostBindings: function SimpleCommandComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("NgxEditor__MenuItem--Active", ctx.isActive)("NgxEditor--Disabled", ctx.disabled);
    } }, inputs: { name: "name" }, decls: 2, vars: 4, consts: [[1, "NgxEditor__MenuItem--IconContainer", 3, "innerHTML", "title", "mousedown"]], template: function SimpleCommandComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵlistener("mousedown", function SimpleCommandComponent_Template_div_mousedown_0_listener($event) { return ctx.toggle($event); });
        ɵngcc0.ɵɵpipe(1, "sanitizeHtml");
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("innerHTML", ɵngcc0.ɵɵpipeBind1(1, 2, ctx.html), ɵngcc0.ɵɵsanitizeHtml)("title", ctx.getTitle(ctx.name));
    } }, pipes: [ɵngcc3.SanitizeHtmlPipe], styles: [""] });
SimpleCommandComponent.ctorParameters = () => [
    { type: NgxEditorService },
    { type: SharedService }
];
SimpleCommandComponent.propDecorators = {
    name: [{ type: Input }],
    isActive: [{ type: HostBinding, args: ['class.NgxEditor__MenuItem--Active',] }],
    disabled: [{ type: HostBinding, args: ['class.NgxEditor--Disabled',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SimpleCommandComponent, [{
        type: Component,
        args: [{
                selector: 'ngx-simple-command',
                template: "<div class=\"NgxEditor__MenuItem--IconContainer\" [innerHTML]=\"html | sanitizeHtml\" (mousedown)=\"toggle($event)\"\n  [title]=\"getTitle(name)\">\n</div>\n",
                styles: [""]
            }]
    }], function () { return [{ type: ɵngcc1.NgxEditorService }, { type: ɵngcc2.SharedService }]; }, { isActive: [{
            type: HostBinding,
            args: ['class.NgxEditor__MenuItem--Active']
        }], disabled: [{
            type: HostBinding,
            args: ['class.NgxEditor--Disabled']
        }], name: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWNvbW1hbmQuY29tcG9uZW50LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGliL21vZHVsZXMvbWVudS9zaW1wbGUtY29tbWFuZC9zaW1wbGUtY29tbWFuZC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFxQixNQUFNLGVBQWUsQ0FBQztBQUlqRixPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDakQsT0FBTyxJQUFJLE1BQU0sZ0JBQWdCLENBQUM7QUFDbEMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDM0QsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHlDQUF5QyxDQUFDOzs7OztBQVF4RSxNQUFNLE9BQU8sc0JBQXNCO0FBQUcsSUFPcEMsWUFDVSxXQUE2QixFQUM3QixhQUE0QjtBQUNyQyxRQUZTLGdCQUFXLEdBQVgsV0FBVyxDQUFrQjtBQUFDLFFBQzlCLGtCQUFhLEdBQWIsYUFBYSxDQUFlO0FBQ3hDLFFBUW9ELGFBQVEsR0FBRyxLQUFLLENBQUM7QUFDckUsUUFBNEMsYUFBUSxHQUFHLEtBQUssQ0FBQztBQUM3RCxRQWFFLFdBQU0sR0FBRyxDQUFDLElBQWdCLEVBQUUsRUFBRTtBQUNoQyxZQUFJLE1BQU0sRUFBRSxLQUFLLEVBQUUsR0FBRyxJQUFJLENBQUM7QUFDM0IsWUFBSSxNQUFNLE9BQU8sR0FBRyxjQUFjLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNsRCxZQUFJLElBQUksQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUM1QyxZQUFJLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQy9DLFFBQUUsQ0FBQyxDQUFBO0FBQ0gsUUE1QkksSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQztBQUM5QyxRQUNJLElBQUksQ0FBQyx3QkFBd0IsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsSUFBZ0IsRUFBRSxFQUFFO0FBQ3BHLFlBQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN4QixRQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ1AsSUFBRSxDQUFDO0FBQ0gsSUFJRSxNQUFNLENBQUMsQ0FBYTtBQUFJLFFBQ3RCLENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQztBQUN2QixRQUNJLElBQUksQ0FBQyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7QUFDeEIsWUFBTSxPQUFPO0FBQ2IsU0FBSztBQUNMLFFBQ0ksTUFBTSxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDO0FBQ2hELFFBQUksTUFBTSxPQUFPLEdBQUcsY0FBYyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDbEQsUUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQztBQUNyQyxJQUFFLENBQUM7QUFDSCxJQVFFLFFBQVEsQ0FBQyxJQUFZO0FBQUksUUFDdkIsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDN0MsSUFBRSxDQUFDO0FBQ0gsSUFDRSxRQUFRO0FBQUssUUFDWCxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3BDLElBQUUsQ0FBQztBQUNILElBQ0UsV0FBVztBQUFLLFFBQ2QsSUFBSSxDQUFDLHdCQUF3QixDQUFDLFdBQVcsRUFBRSxDQUFDO0FBQ2hELElBQUUsQ0FBQztBQUNIO2tEQXpEQyxTQUFTLFNBQUMsa0JBQ1QsUUFBUSxFQUFFLG9CQUFvQixrQkFDOUI7b0ZBQThDLDRDQUUvQzs7Ozs7Ozs7OzJEQUVHO0FBQUM7QUFBZ0QsWUFUNUMsZ0JBQWdCO0FBQUksWUFDcEIsYUFBYTtBQUFHO0FBQUc7QUFBMEMsbUJBU25FLEtBQUs7QUFBSyx1QkFpQlYsV0FBVyxTQUFDLG1DQUFtQztBQUFPLHVCQUN0RCxXQUFXLFNBQUMsMkJBQTJCO0FBQU07Ozs7Ozs7Ozs7Ozs7Ozs7b0JBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSG9zdEJpbmRpbmcsIElucHV0LCBPbkRlc3Ryb3ksIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRWRpdG9yVmlldyB9IGZyb20gJ3Byb3NlbWlycm9yLXZpZXcnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7IFNpbXBsZUNvbW1hbmRzIH0gZnJvbSAnLi4vTWVudUNvbW1hbmRzJztcbmltcG9ydCBJY29uIGZyb20gJy4uLy4uLy4uL2ljb25zJztcbmltcG9ydCB7IE5neEVkaXRvclNlcnZpY2UgfSBmcm9tICcuLi8uLi8uLi9lZGl0b3Iuc2VydmljZSc7XG5pbXBvcnQgeyBTaGFyZWRTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vc2VydmljZXMvc2hhcmVkL3NoYXJlZC5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbmd4LXNpbXBsZS1jb21tYW5kJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3NpbXBsZS1jb21tYW5kLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vc2ltcGxlLWNvbW1hbmQuY29tcG9uZW50LnNjc3MnXVxufSlcblxuZXhwb3J0IGNsYXNzIFNpbXBsZUNvbW1hbmRDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG4gIEBJbnB1dCgpIG5hbWU6IHN0cmluZztcblxuICBodG1sOiBzdHJpbmc7XG4gIGVkaXRvclZpZXc6IEVkaXRvclZpZXc7XG4gIHByaXZhdGUgcGx1Z2luVXBkYXRlU3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBuZ3hlU2VydmljZTogTmd4RWRpdG9yU2VydmljZSxcbiAgICBwcml2YXRlIHNoYXJlZFNlcnZpY2U6IFNoYXJlZFNlcnZpY2VcbiAgKSB7XG4gICAgdGhpcy5lZGl0b3JWaWV3ID0gdGhpcy5zaGFyZWRTZXJ2aWNlLnZpZXc7XG5cbiAgICB0aGlzLnBsdWdpblVwZGF0ZVN1YnNjcmlwdGlvbiA9IHRoaXMuc2hhcmVkU2VydmljZS5wbHVnaW4udXBkYXRlLnN1YnNjcmliZSgodmlldzogRWRpdG9yVmlldykgPT4ge1xuICAgICAgdGhpcy51cGRhdGUodmlldyk7XG4gICAgfSk7XG4gIH1cblxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLk5neEVkaXRvcl9fTWVudUl0ZW0tLUFjdGl2ZScpIGlzQWN0aXZlID0gZmFsc2U7XG4gIEBIb3N0QmluZGluZygnY2xhc3MuTmd4RWRpdG9yLS1EaXNhYmxlZCcpIGRpc2FibGVkID0gZmFsc2U7XG5cbiAgdG9nZ2xlKGU6IE1vdXNlRXZlbnQpOiB2b2lkIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICBpZiAoZS5idXR0b24gIT09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCB7IHN0YXRlLCBkaXNwYXRjaCB9ID0gdGhpcy5lZGl0b3JWaWV3O1xuICAgIGNvbnN0IGNvbW1hbmQgPSBTaW1wbGVDb21tYW5kcy5nZXQodGhpcy5uYW1lKTtcbiAgICBjb21tYW5kLmV4ZWN1dGUoc3RhdGUsIGRpc3BhdGNoKTtcbiAgfVxuXG4gIHVwZGF0ZSA9ICh2aWV3OiBFZGl0b3JWaWV3KSA9PiB7XG4gICAgY29uc3QgeyBzdGF0ZSB9ID0gdmlldztcbiAgICBjb25zdCBjb21tYW5kID0gU2ltcGxlQ29tbWFuZHMuZ2V0KHRoaXMubmFtZSk7XG4gICAgdGhpcy5pc0FjdGl2ZSA9IGNvbW1hbmQuaXNBY3RpdmUoc3RhdGUpO1xuICAgIHRoaXMuZGlzYWJsZWQgPSAhY29tbWFuZC5jYW5FeGVjdXRlKHN0YXRlKTtcbiAgfVxuXG4gIGdldFRpdGxlKG5hbWU6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMubmd4ZVNlcnZpY2UubG9jYWxzLmdldChuYW1lKTtcbiAgfVxuXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIHRoaXMuaHRtbCA9IEljb24uZ2V0KHRoaXMubmFtZSk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICB0aGlzLnBsdWdpblVwZGF0ZVN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICB9XG59XG4iXX0=