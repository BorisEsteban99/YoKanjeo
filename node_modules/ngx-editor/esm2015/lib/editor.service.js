import { Injectable, Optional } from '@angular/core';
import Locals from './Locals';
import { schema } from './schema';
import * as i0 from "@angular/core";
import * as ɵngcc0 from '@angular/core';
const DEFAULT_TOOLBAR = [
    ['bold', 'italic'],
    ['code', 'blockquote'],
    ['underline', 'strike'],
    ['ordered_list', 'bullet_list'],
    [{ heading: ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'] }],
    ['link', 'image'],
    ['text_color', 'background_color'],
    ['align_left', 'align_center', 'align_right', 'align_justify'],
];
const DEFAULT_COLOR_PRESETS = [
    '#b60205',
    '#d93f0b',
    '#fbca04',
    '#0e8a16',
    '#006b75',
    '#1d76db',
    '#0052cc',
    '#5319e7',
    '#e99695',
    '#f9d0c4',
    '#fef2c0',
    '#c2e0c6',
    '#bfdadc',
    '#c5def5',
    '#bfd4f2',
    '#d4c5f9'
];
const DEFAULT_MENU = {
    toolbar: DEFAULT_TOOLBAR,
    colorPresets: []
};
const DEFAULT_SCHEMA = schema;
const DEFAULT_PLUGINS = [];
export class NgxEditorServiceConfig {
    constructor() {
        this.plugins = DEFAULT_PLUGINS;
        this.nodeViews = {};
        this.schema = DEFAULT_SCHEMA;
        this.menu = DEFAULT_MENU;
        this.locals = {};
    }
}
NgxEditorServiceConfig.ɵfac = function NgxEditorServiceConfig_Factory(t) { return new (t || NgxEditorServiceConfig)(); };
NgxEditorServiceConfig.ɵprov = i0.ɵɵdefineInjectable({ factory: function NgxEditorServiceConfig_Factory() { return new NgxEditorServiceConfig(); }, token: NgxEditorServiceConfig, providedIn: "root" });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxEditorServiceConfig, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();
export class NgxEditorService {
    constructor(config) {
        this.config = config;
    }
    get locals() {
        return new Locals(this.config.locals);
    }
    get menu() {
        return this.config.menu;
    }
    get colorPresets() {
        const col = 8;
        const colors = [];
        const { colorPresets } = this.config.menu;
        const allColors = colorPresets.length ? colorPresets : DEFAULT_COLOR_PRESETS;
        allColors.forEach((color, index) => {
            const row = Math.floor(index / col);
            if (!colors[row]) {
                colors.push([]);
            }
            colors[row].push(color);
        });
        return colors;
    }
}
NgxEditorService.ɵfac = function NgxEditorService_Factory(t) { return new (t || NgxEditorService)(ɵngcc0.ɵɵinject(NgxEditorServiceConfig, 8)); };
NgxEditorService.ɵprov = i0.ɵɵdefineInjectable({ factory: function NgxEditorService_Factory() { return new NgxEditorService(i0.ɵɵinject(NgxEditorServiceConfig, 8)); }, token: NgxEditorService, providedIn: "root" });
NgxEditorService.ctorParameters = () => [
    { type: NgxEditorServiceConfig, decorators: [{ type: Optional }] }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxEditorService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: NgxEditorServiceConfig, decorators: [{
                type: Optional
            }] }]; }, null); })();
export const provideMyServiceOptions = (config) => {
    var _a, _b, _c, _d;
    let menu;
    if (config.menu !== null) {
        if (!config.menu) {
            menu = DEFAULT_MENU;
        }
        else if (Array.isArray(config.menu)) {
            menu = Object.assign(Object.assign({}, DEFAULT_MENU), { toolbar: config.menu });
        }
        else {
            menu = Object.assign(Object.assign({}, DEFAULT_MENU), config.menu);
        }
    }
    return {
        plugins: (_a = config === null || config === void 0 ? void 0 : config.plugins) !== null && _a !== void 0 ? _a : DEFAULT_PLUGINS,
        nodeViews: (_b = config === null || config === void 0 ? void 0 : config.nodeViews) !== null && _b !== void 0 ? _b : {},
        menu,
        schema: (_c = config === null || config === void 0 ? void 0 : config.schema) !== null && _c !== void 0 ? _c : DEFAULT_SCHEMA,
        locals: (_d = config.locals) !== null && _d !== void 0 ? _d : {}
    };
};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWRpdG9yLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvZWRpdG9yLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFLckQsT0FBTyxNQUFNLE1BQU0sVUFBVSxDQUFDO0FBRTlCLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDbEM7O0FBQ0EsTUFBTSxlQUFlLEdBQVk7QUFDakMsSUFBRSxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUM7QUFDcEIsSUFBRSxDQUFDLE1BQU0sRUFBRSxZQUFZLENBQUM7QUFDeEIsSUFBRSxDQUFDLFdBQVcsRUFBRSxRQUFRLENBQUM7QUFDekIsSUFBRSxDQUFDLGNBQWMsRUFBRSxhQUFhLENBQUM7QUFDakMsSUFBRSxDQUFDLEVBQUUsT0FBTyxFQUFFLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDO0FBQ3JELElBQUUsQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDO0FBQ25CLElBQUUsQ0FBQyxZQUFZLEVBQUUsa0JBQWtCLENBQUM7QUFDcEMsSUFBRSxDQUFDLFlBQVksRUFBRSxjQUFjLEVBQUUsYUFBYSxFQUFFLGVBQWUsQ0FBQztBQUNoRSxDQUFDLENBQUM7QUFFRixNQUFNLHFCQUFxQixHQUFHO0FBQzlCLElBQUUsU0FBUztBQUNYLElBQUUsU0FBUztBQUNYLElBQUUsU0FBUztBQUNYLElBQUUsU0FBUztBQUNYLElBQUUsU0FBUztBQUNYLElBQUUsU0FBUztBQUNYLElBQUUsU0FBUztBQUNYLElBQUUsU0FBUztBQUNYLElBQUUsU0FBUztBQUNYLElBQUUsU0FBUztBQUNYLElBQUUsU0FBUztBQUNYLElBQUUsU0FBUztBQUNYLElBQUUsU0FBUztBQUNYLElBQUUsU0FBUztBQUNYLElBQUUs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LENBQUM7QUFDUixTQUFLO0FBQUMsYUFBSztBQUNYLFlBQU0sSUFBSSxtQ0FDQyxZQUFZLEdBQ1osTUFBTSxDQUFDLElBQUksQ0FDZixDQUFDO0FBQ1IsU0FBSztBQUNMLEtBQUc7QUFDSCxJQUNFLE9BQU87QUFDVCxRQUFJLE9BQU8sUUFBRSxNQUFNLGFBQU4sTUFBTSx1QkFBTixNQUFNLENBQUUsT0FBTyxtQ0FBSSxlQUFlO0FBQy9DLFFBQUksU0FBUyxRQUFFLE1BQU0sYUFBTixNQUFNLHVCQUFOLE1BQU0sQ0FBRSxTQUFTLG1DQUFJLEVBQUU7QUFDdEMsUUFBSSxJQUFJO0FBQ1IsUUFBSSxNQUFNLFFBQUUsTUFBTSxhQUFOLE1BQU0sdUJBQU4sTUFBTSxDQUFFLE1BQU0sbUNBQUksY0FBYztBQUM1QyxRQUFJLE1BQU0sUUFBRSxNQUFNLENBQUMsTUFBTSxtQ0FBSSxFQUFFO0FBQy9CLEtBQUcsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgT3B0aW9uYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFNjaGVtYSB9IGZyb20gJ3Byb3NlbWlycm9yLW1vZGVsJztcbmltcG9ydCB7IFBsdWdpbiB9IGZyb20gJ3Byb3NlbWlycm9yLXN0YXRlJztcblxuaW1wb3J0IHsgTWVudSwgTmd4RWRpdG9yQ29uZmlnLCBOb2RlVmlld3MsIFRvb2xiYXIgfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCBMb2NhbHMgZnJvbSAnLi9Mb2NhbHMnO1xuXG5pbXBvcnQgeyBzY2hlbWEgfSBmcm9tICcuL3NjaGVtYSc7XG5cbmNvbnN0IERFRkFVTFRfVE9PTEJBUjogVG9vbGJhciA9IFtcbiAgWydib2xkJywgJ2l0YWxpYyddLFxuICBbJ2NvZGUnLCAnYmxvY2txdW90ZSddLFxuICBbJ3VuZGVybGluZScsICdzdHJpa2UnXSxcbiAgWydvcmRlcmVkX2xpc3QnLCAnYnVsbGV0X2xpc3QnXSxcbiAgW3sgaGVhZGluZzogWydoMScsICdoMicsICdoMycsICdoNCcsICdoNScsICdoNiddIH1dLFxuICBbJ2xpbmsnLCAnaW1hZ2UnXSxcbiAgWyd0ZXh0X2NvbG9yJywgJ2JhY2tncm91bmRfY29sb3InXSxcbiAgWydhbGlnbl9sZWZ0JywgJ2FsaWduX2NlbnRlcicsICdhbGlnbl9yaWdodCcsICdhbGlnbl9qdXN0aWZ5J10sXG5dO1xuXG5jb25zdCBERUZBVUxUX0NPTE9SX1BSRVNFVFMgPSBbXG4gICcjYjYwMjA1JyxcbiAgJyNkOTNmMGInLFxuICAnI2ZiY2EwNCcsXG4gICcjMGU4YTE2JyxcbiAgJyMwMDZiNzUnLFxuICAnIzFkNzZkYicsXG4gICcjMDA1MmNjJyxcbiAgJyM1MzE5ZTcnLFxuICAnI2U5OTY5NScsXG4gICcjZjlkMGM0JyxcbiAgJyNmZWYyYzAnLFxuICAnI2MyZTBjNicsXG4gICcjYmZkYWRjJyxcbiAgJyNjNWRlZjUnLFxuICAnI2JmZDRmMicsXG4gICcjZDRjNWY5J1xuXTtcblxuY29uc3QgREVGQVVMVF9NRU5VOiBNZW51ID0ge1xuICB0b29sYmFyOiBERUZBVUxUX1RPT0xCQVIsXG4gIGNvbG9yUHJlc2V0czogW11cbn07XG5cbmNvbnN0IERFRkFVTFRfU0NIRU1BID0gc2NoZW1hO1xuY29uc3QgREVGQVVMVF9QTFVHSU5TOiBQbHVnaW5bXSA9IFtcbl07XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIE5neEVkaXRvclNlcnZpY2VDb25maWcge1xuICBwdWJsaWMgcGx1Z2luczogUGx1Z2luW10gPSBERUZBVUxUX1BMVUdJTlM7XG4gIHB1YmxpYyBub2RlVmlld3M6IE5vZGVWaWV3cyA9IHt9O1xuICBwdWJsaWMgc2NoZW1hOiBTY2hlbWEgPSBERUZBVUxUX1NDSEVNQTtcbiAgcHVibGljIG1lbnUgPSBERUZBVUxUX01FTlU7XG4gIHB1YmxpYyBsb2NhbHMgPSB7fTtcbn1cblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgTmd4RWRpdG9yU2VydmljZSB7XG4gIGNvbmZpZzogTmd4RWRpdG9yU2VydmljZUNvbmZpZztcblxuICBjb25zdHJ1Y3RvcihAT3B0aW9uYWwoKSBjb25maWc/OiBOZ3hFZGl0b3JTZXJ2aWNlQ29uZmlnKSB7XG4gICAgdGhpcy5jb25maWcgPSBjb25maWc7XG4gIH1cblxuICBnZXQgbG9jYWxzKCk6IExvY2FscyB7XG4gICAgcmV0dXJuIG5ldyBMb2NhbHModGhpcy5jb25maWcubG9jYWxzKTtcbiAgfVxuXG4gIGdldCBtZW51KCk6IE1lbnUge1xuICAgIHJldHVybiB0aGlzLmNvbmZpZy5tZW51O1xuICB9XG5cbiAgZ2V0IGNvbG9yUHJlc2V0cygpOiBzdHJpbmdbXVtdIHtcbiAgICBjb25zdCBjb2wgPSA4O1xuICAgIGNvbnN0IGNvbG9yczogc3RyaW5nW11bXSA9IFtdO1xuXG4gICAgY29uc3QgeyBjb2xvclByZXNldHMgfSA9IHRoaXMuY29uZmlnLm1lbnU7XG4gICAgY29uc3QgYWxsQ29sb3JzID0gY29sb3JQcmVzZXRzLmxlbmd0aCA/IGNvbG9yUHJlc2V0cyA6IERFRkFVTFRfQ09MT1JfUFJFU0VUUztcblxuICAgIGFsbENvbG9ycy5mb3JFYWNoKChjb2xvciwgaW5kZXgpID0+IHtcbiAgICAgIGNvbnN0IHJvdyA9IE1hdGguZmxvb3IoaW5kZXggLyBjb2wpO1xuXG4gICAgICBpZiAoIWNvbG9yc1tyb3ddKSB7XG4gICAgICAgIGNvbG9ycy5wdXNoKFtdKTtcbiAgICAgIH1cblxuICAgICAgY29sb3JzW3Jvd10ucHVzaChjb2xvcik7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gY29sb3JzO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBwcm92aWRlTXlTZXJ2aWNlT3B0aW9ucyA9IChjb25maWc/OiBOZ3hFZGl0b3JDb25maWcpOiBOZ3hFZGl0b3JTZXJ2aWNlQ29uZmlnID0+IHtcbiAgbGV0IG1lbnU6IE1lbnU7XG5cbiAgaWYgKGNvbmZpZy5tZW51ICE9PSBudWxsKSB7XG4gICAgaWYgKCFjb25maWcubWVudSkge1xuICAgICAgbWVudSA9IERFRkFVTFRfTUVOVTtcbiAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoY29uZmlnLm1lbnUpKSB7XG4gICAgICBtZW51ID0ge1xuICAgICAgICAuLi5ERUZBVUxUX01FTlUsXG4gICAgICAgIHRvb2xiYXI6IGNvbmZpZy5tZW51LFxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgbWVudSA9IHtcbiAgICAgICAgLi4uREVGQVVMVF9NRU5VLFxuICAgICAgICAuLi5jb25maWcubWVudSxcbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBwbHVnaW5zOiBjb25maWc/LnBsdWdpbnMgPz8gREVGQVVMVF9QTFVHSU5TLFxuICAgIG5vZGVWaWV3czogY29uZmlnPy5ub2RlVmlld3MgPz8ge30sXG4gICAgbWVudSxcbiAgICBzY2hlbWE6IGNvbmZpZz8uc2NoZW1hID8/IERFRkFVTFRfU0NIRU1BLFxuICAgIGxvY2FsczogY29uZmlnLmxvY2FscyA/PyB7fVxuICB9O1xufTtcbiJdfQ==