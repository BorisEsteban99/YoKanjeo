/**
 * @fileoverview added by tsickle
 * Generated from: lib/image-cropper.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ImageCropperComponent } from './component/image-cropper.component';
import * as ɵngcc0 from '@angular/core';
var ImageCropperModule = /** @class */ (function () {
    function ImageCropperModule() {
    }
ImageCropperModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ImageCropperModule });
ImageCropperModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ImageCropperModule_Factory(t) { return new (t || ImageCropperModule)(); }, imports: [[
            CommonModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ImageCropperModule, { declarations: function () { return [ImageCropperComponent]; }, imports: function () { return [CommonModule]; }, exports: function () { return [ImageCropperComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ImageCropperModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule
                ],
                declarations: [
                    ImageCropperComponent
                ],
                exports: [
                    ImageCropperComponent
                ]
            }]
    }], function () { return []; }, null); })();
    return ImageCropperModule;
}());
export { ImageCropperModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1hZ2UtY3JvcHBlci5tb2R1bGUuanMiLCJzb3VyY2VzIjpbIm5neC1pbWFnZS1jcm9wcGVyL2xpYi9pbWFnZS1jcm9wcGVyLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHFDQUFxQyxDQUFDOztBQUU1RTtBQUlPLElBSlA7QUFFTyxJQVVQLENBQUM7c0RBWkEsUUFBUSxTQUFDO1lBQ1IsT0FBTyxFQUFFLDBCQUNQLFlBQVksc0JBQ2Isc0JBQ0QsWUFBWSxFQUFFLDBCQUNaO09BQXFCO0lBQ3RCO1dBQ0QsT0FBTyxFQUFFLDBCQUNQLHFCQUFxQixzQkFDdEIsa0JBQ0Y7Ozs7Ozs7Ozs7Ozs7O2dEQUNRO0FBQUMsSUFDVix5QkFBQztBQUNBLENBREEsQUFaRCxJQVlDO0FBQ0QsU0FGYSxrQkFBa0I7QUFDOUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IEltYWdlQ3JvcHBlckNvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50L2ltYWdlLWNyb3BwZXIuY29tcG9uZW50JztcblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW1xuICAgIENvbW1vbk1vZHVsZVxuICBdLFxuICBkZWNsYXJhdGlvbnM6IFtcbiAgICBJbWFnZUNyb3BwZXJDb21wb25lbnRcbiAgXSxcbiAgZXhwb3J0czogW1xuICAgIEltYWdlQ3JvcHBlckNvbXBvbmVudFxuICBdXG59KVxuZXhwb3J0IGNsYXNzIEltYWdlQ3JvcHBlck1vZHVsZSB7XG59XG4iXX0=