import { Injectable } from '@angular/core';
import { of, Observable } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
export const DEFAULT_THEME_COLOR = '#3b5560';
export const STEP_DEFAULT_POSITION = 'bottom';
export const DEFAULT_TIMEOUT_BETWEEN_STEPS = 1;
export class ObservableCustomTexts {
}
export const DEFAULT_TEXTS = {
    prev: of('prev'),
    next: of('next'),
    done: of('done'),
    close: of(null)
};
export class JoyrideOptionsService {
    constructor() {
        this.themeColor = DEFAULT_THEME_COLOR;
        this.stepDefaultPosition = STEP_DEFAULT_POSITION;
        this.logsEnabled = false;
        this.showCounter = true;
        this.showPrevButton = true;
        this.stepsOrder = [];
    }
    setOptions(options) {
        this.stepsOrder = options.steps;
        this.stepDefaultPosition = options.stepDefaultPosition
            ? options.stepDefaultPosition
            : this.stepDefaultPosition;
        this.logsEnabled =
            typeof options.logsEnabled !== 'undefined'
                ? options.logsEnabled
                : this.logsEnabled;
        this.showCounter =
            typeof options.showCounter !== 'undefined'
                ? options.showCounter
                : this.showCounter;
        this.showPrevButton =
            typeof options.showPrevButton !== 'undefined'
                ? options.showPrevButton
                : this.showPrevButton;
        this.themeColor = options.themeColor
            ? options.themeColor
            : this.themeColor;
        this.firstStep = options.startWith;
        this.waitingTime =
            typeof options.waitingTime !== 'undefined'
                ? options.waitingTime
                : DEFAULT_TIMEOUT_BETWEEN_STEPS;
        typeof options.customTexts !== 'undefined'
            ? this.setCustomText(options.customTexts)
            : this.setCustomText(DEFAULT_TEXTS);
    }
    getBackdropColor() {
        return this.hexToRgb(this.themeColor);
    }
    getThemeColor() {
        return this.themeColor;
    }
    getStepDefaultPosition() {
        return this.stepDefaultPosition;
    }
    getStepsOrder() {
        return this.stepsOrder;
    }
    getFirstStep() {
        return this.firstStep;
    }
    getWaitingTime() {
        return this.waitingTime;
    }
    areLogsEnabled() {
        return this.logsEnabled;
    }
    isCounterVisible() {
        return this.showCounter;
    }
    isPrevButtonVisible() {
        return this.showPrevButton;
    }
    getCustomTexts() {
        return this.customTexts;
    }
    setCustomText(texts) {
        let prev;
        let next;
        let done;
        let close;
        prev = texts.prev ? texts.prev : DEFAULT_TEXTS.prev;
        next = texts.next ? texts.next : DEFAULT_TEXTS.next;
        done = texts.done ? texts.done : DEFAULT_TEXTS.done;
        close = texts.close ? texts.close : DEFAULT_TEXTS.close;
        this.customTexts = {
            prev: this.toObservable(prev),
            next: this.toObservable(next),
            done: this.toObservable(done),
            close: this.toObservable(close)
        };
    }
    toObservable(value) {
        return value instanceof Observable ? value : of(value);
    }
    hexToRgb(hex) {
        const shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
        hex = hex.replace(shorthandRegex, (m, r, g, b) => {
            return r + r + g + g + b + b;
        });
        const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
        return result
            ? `${parseInt(result[1], 16)}, ${parseInt(result[2], 16)}, ${parseInt(result[3], 16)}`
            : null;
    }
}
JoyrideOptionsService.ɵfac = function JoyrideOptionsService_Factory(t) { return new (t || JoyrideOptionsService)(); };
JoyrideOptionsService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: JoyrideOptionsService, factory: JoyrideOptionsService.ɵfac });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(JoyrideOptionsService, [{
        type: Injectable
    }], function () { return []; }, null); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,