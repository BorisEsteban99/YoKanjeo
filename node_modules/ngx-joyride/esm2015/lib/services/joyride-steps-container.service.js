import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import { JoyrideOptionsService } from './joyride-options.service';
import { LoggerService } from './logger.service';
import { JoyrideError, JoyrideStepOutOfRange } from '../models/joyride-error.class';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './joyride-options.service';
import * as ɵngcc2 from './logger.service';
const ROUTE_SEPARATOR = '@';
class Step {
}
export var StepActionType;
(function (StepActionType) {
    StepActionType["NEXT"] = "NEXT";
    StepActionType["PREV"] = "PREV";
})(StepActionType || (StepActionType = {}));
export class JoyrideStepsContainerService {
    constructor(stepOptions, logger) {
        this.stepOptions = stepOptions;
        this.logger = logger;
        this.tempSteps = [];
        this.currentStepIndex = -2;
        this.stepHasBeenModified = new Subject();
    }
    getFirstStepIndex() {
        const firstStep = this.stepOptions.getFirstStep();
        const stepIds = this.stepOptions.getStepsOrder();
        let index = stepIds.indexOf(firstStep);
        if (index < 0) {
            index = 0;
            if (firstStep !== undefined)
                this.logger.warn(`The step ${firstStep} does not exist. Check in your step list if it's present.`);
        }
        return index;
    }
    init() {
        this.logger.info('Initializing the steps array.');
        this.steps = [];
        this.currentStepIndex = this.getFirstStepIndex() - 1;
        let stepIds = this.stepOptions.getStepsOrder();
        stepIds.forEach(stepId => this.steps.push({ id: stepId, step: null }));
    }
    addStep(stepToAdd) {
        let stepExist = this.tempSteps.filter(step => step.name === stepToAdd.name).length > 0;
        if (!stepExist) {
            this.logger.info(`Adding step ${stepToAdd.name} to the steps list.`);
            this.tempSteps.push(stepToAdd);
        }
        else {
            let stepIndexToReplace = this.tempSteps.findIndex(step => step.name === stepToAdd.name);
            this.tempSteps[stepIndexToReplace] = stepToAdd;
        }
    }
    get(action) {
        if (action === StepActionType.NEXT)
            this.currentStepIndex++;
        else
            this.currentStepIndex--;
        if (this.currentStepIndex < 0 || this.currentStepIndex >= this.steps.length)
            throw new JoyrideStepOutOfRange('The first or last step of the tour cannot be found!');
        const stepName = this.getStepName(this.steps[this.currentStepIndex].id);
        const index = this.tempSteps.findIndex(step => step.name === stepName);
        let stepFound = this.tempSteps[index];
        this.steps[this.currentStepIndex].step = stepFound;
        if (stepFound == null) {
            this.logger.warn(`Step ${this.steps[this.currentStepIndex].id} not found in the DOM. Check if it's hidden by *ngIf directive.`);
        }
        return stepFound;
    }
    getStepRoute(action) {
        let stepID;
        if (action === StepActionType.NEXT) {
            stepID = this.steps[this.currentStepIndex + 1] ? this.steps[this.currentStepIndex + 1].id : null;
        }
        else {
            stepID = this.steps[this.currentStepIndex - 1] ? this.steps[this.currentStepIndex - 1].id : null;
        }
        let stepRoute = stepID && stepID.includes(ROUTE_SEPARATOR) ? stepID.split(ROUTE_SEPARATOR)[1] : '';
        return stepRoute;
    }
    updatePosition(stepName, position) {
        let index = this.getStepIndex(stepName);
        if (this.steps[index].step) {
            this.steps[index].step.position = position;
            this.stepHasBeenModified.next(this.steps[index].step);
        }
        else {
            this.logger.warn(`Trying to modify the position of ${stepName} to ${position}. Step not found!Is this step located in a different route?`);
        }
    }
    getStepNumber(stepName) {
        return this.getStepIndex(stepName) + 1;
    }
    getStepsCount() {
        let stepsOrder = this.stepOptions.getStepsOrder();
        return stepsOrder.length;
    }
    getStepIndex(stepName) {
        const index = this.steps
            .map(step => (step.id.includes(ROUTE_SEPARATOR) ? step.id.split(ROUTE_SEPARATOR)[0] : step.id))
            .findIndex(name => stepName === name);
        if (index === -1)
            throw new JoyrideError(`The step with name: ${stepName} does not exist in the step list.`);
        return index;
    }
    getStepName(stepID) {
        let stepName = stepID && stepID.includes(ROUTE_SEPARATOR) ? stepID.split(ROUTE_SEPARATOR)[0] : stepID;
        return stepName;
    }
}
JoyrideStepsContainerService.ɵfac = function JoyrideStepsContainerService_Factory(t) { return new (t || JoyrideStepsContainerService)(ɵngcc0.ɵɵinject(ɵngcc1.JoyrideOptionsService), ɵngcc0.ɵɵinject(ɵngcc2.LoggerService)); };
JoyrideStepsContainerService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: JoyrideStepsContainerService, factory: JoyrideStepsContainerService.ɵfac });
JoyrideStepsContainerService.ctorParameters = () => [
    { type: JoyrideOptionsService },
    { type: LoggerService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(JoyrideStepsContainerService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.JoyrideOptionsService }, { type: ɵngcc2.LoggerService }]; }, null); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiam95cmlkZS1zdGVwcy1jb250YWluZXIuc2VydmljZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LWpveXJpZGUvc3JjL2xpYi9zZXJ2aWNlcy9qb3lyaWRlLXN0ZXBzLWNvbnRhaW5lci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMvQixPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUNsRSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDakQsT0FBTyxFQUFFLFlBQVksRUFBRSxxQkFBcUIsRUFBRSxNQUFNLCtCQUErQixDQUFDOzs7O0FBRXBGLE1BQU0sZUFBZSxHQUFHLEdBQUcsQ0FBQztBQUU1QixNQUFNLElBQUk7QUFDVixDQUVDO0FBRUQsTUFBTSxDQUFOLElBQVksY0FHWDtBQUhELFdBQVksY0FBYztBQUN6QixJQUFHLCtCQUFhLENBQUE7QUFBRSxJQUNmLCtCQUFhLENBQUE7QUFDakIsQ0FBQyxFQUhXLGNBQWMsS0FBZCxjQUFjLFFBR3pCO0FBR0QsTUFBTSxPQUFPLDRCQUE0QjtBQUN6QyxJQUtJLFlBQTZCLFdBQWtDLEVBQW1CLE1BQXFCO0FBQUssUUFBL0UsZ0JBQVcsR0FBWCxXQUFXLENBQXVCO0FBQUUsUUFBaUIsV0FBTSxHQUFOLE1BQU0sQ0FBZTtBQUFFLFFBSmpHLGNBQVMsR0FBa0IsRUFBRSxDQUFDO0FBQzFDLFFBQVkscUJBQWdCLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDbEMsUUFBSSx3QkFBbUIsR0FBeUIsSUFBSSxPQUFPLEVBQWUsQ0FBQztBQUMzRSxJQUM4RyxDQUFDO0FBQy9HLElBQ1ksaUJBQWlCO0FBQU0sUUFDM0IsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxZQUFZLEVBQUUsQ0FBQztBQUMxRCxRQUFRLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxFQUFFLENBQUM7QUFDekQsUUFDUSxJQUFJLEtBQUssR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQy9DLFFBQVEsSUFBSSxLQUFLLEdBQUcsQ0FBQyxFQUFFO0FBQ3ZCLFlBQVksS0FBSyxHQUFHLENBQUMsQ0FBQztBQUN0QixZQUFZLElBQUksU0FBUyxLQUFLLFNBQVM7QUFBRyxnQkFBRCxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLFNBQVMsMkRBQTJELENBQUMsQ0FBQztBQUM1SSxTQUFTO0FBQ1QsUUFDUSxPQUFPLEtBQUssQ0FBQztBQUNyQixJQUFJLENBQUM7QUFDTCxJQUNJLElBQUk7QUFDUixRQUFRLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLCtCQUErQixDQUFDLENBQUM7QUFDMUQsUUFBUSxJQUFJLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQztBQUN4QixRQUFRLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDN0QsUUFBUSxJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsRUFBRSxDQUFDO0FBQ3ZELFFBQVEsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQy9FLElBQUksQ0FBQztBQUNMLElBQ0ksT0FBTyxDQUFDLFNBQXNCO0FBQ2xDLFFBQVEsSUFBSSxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0FBQy9GLFFBQVEsSUFBSSxDQUFDLFNBQVMsRUFBRTtBQUN4QixZQUFZLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGVBQWUsU0FBUyxDQUFDLElBQUkscUJBQXFCLENBQUMsQ0FBQztBQUNqRixZQUFZLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQzNDLFNBQVM7QUFBRSxhQUFJO0FBQ2YsWUFBWSxJQUFJLGtCQUFrQixHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDcEcsWUFBWSxJQUFJLENBQUMsU0FBUyxDQUFDLGtCQUFrQixDQUFDLEdBQUcsU0FBUyxDQUFDO0FBQzNELFNBQVM7QUFDVCxJQUFJLENBQUM7QUFDTCxJQUFJLEdBQUcsQ0FBQyxNQUFzQjtBQUFLLFFBQzNCLElBQUksTUFBTSxLQUFLLGNBQWMsQ0FBQyxJQUFJO0FBQUcsWUFBRCxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztBQUNwRTtBQUFjLFlBQUQsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7QUFDckMsUUFDUSxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxDQUFDLElBQUksSUFBSSxDQUFDLGdCQUFnQixJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTTtBQUNuRixZQUFZLE1BQU0sSUFBSSxxQkFBcUIsQ0FBQyxxREFBcUQsQ0FBQyxDQUFDO0FBQ25HLFFBQ1EsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ2hGLFFBQVEsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLFFBQVEsQ0FBQyxDQUFDO0FBQy9FLFFBQVEsSUFBSSxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUM5QyxRQUFRLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUMsSUFBSSxHQUFHLFNBQVMsQ0FBQztBQUMzRCxRQUNRLElBQUksU0FBUyxJQUFJLElBQUksRUFBRTtBQUMvQixZQUFZLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxFQUFFLGlFQUFpRSxDQUFDLENBQUM7QUFDNUksU0FBUztBQUNULFFBQ1EsT0FBTyxTQUFTLENBQUM7QUFDekIsSUFBSSxDQUFDO0FBQ0wsSUFDSSxZQUFZLENBQUMsTUFBc0I7QUFDdkMsUUFBUSxJQUFJLE1BQWMsQ0FBQztBQUMzQixRQUFRLElBQUksTUFBTSxLQUFLLGNBQWMsQ0FBQyxJQUFJLEVBQUU7QUFDNUMsWUFBWSxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLGdCQUFnQixHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0FBQzdHLFNBQVM7QUFBRSxhQUFJO0FBQ2YsWUFBWSxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLGdCQUFnQixHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0FBQzdHLFNBQVM7QUFDVCxRQUFRLElBQUksU0FBUyxHQUFHLE1BQU0sSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7QUFDM0csUUFDUSxPQUFPLFNBQVMsQ0FBQztBQUN6QixJQUFJLENBQUM7QUFDTCxJQUNJLGNBQWMsQ0FBQyxRQUFnQixFQUFFLFFBQWdCO0FBQ3JELFFBQVEsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUNoRCxRQUFRLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLEVBQUU7QUFDcEMsWUFBWSxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO0FBQ3ZELFlBQVksSUFBSSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2xFLFNBQVM7QUFBRSxhQUFJO0FBQ2YsWUFBWSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FDWixvQ0FBb0MsUUFBUSxPQUFPLFFBQVEsNkRBQTZELENBQzNILENBQUM7QUFDZCxTQUFTO0FBQ1QsSUFBSSxDQUFDO0FBQ0wsSUFBSSxhQUFhLENBQUMsUUFBZ0I7QUFBSyxRQUMvQixPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQy9DLElBQUksQ0FBQztBQUNMLElBQ0ksYUFBYTtBQUNqQixRQUFRLElBQUksVUFBVSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxFQUFFLENBQUM7QUFDMUQsUUFBUSxPQUFPLFVBQVUsQ0FBQyxNQUFNLENBQUM7QUFDakMsSUFBSSxDQUFDO0FBQ0wsSUFDWSxZQUFZLENBQUMsUUFBZ0I7QUFBSyxRQUN0QyxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSztBQUNoQyxhQUFhLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDM0csYUFBYSxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxRQUFRLEtBQUssSUFBSSxDQUFDLENBQUM7QUFDbEQsUUFBUSxJQUFJLEtBQUssS0FBSyxDQUFDLENBQUM7QUFBRyxZQUFELE1BQU0sSUFBSSxZQUFZLENBQUMsdUJBQXVCLFFBQVEsbUNBQW1DLENBQUMsQ0FBQztBQUNySCxRQUFRLE9BQU8sS0FBSyxDQUFDO0FBQ3JCLElBQUksQ0FBQztBQUNMLElBQ1ksV0FBVyxDQUFDLE1BQWM7QUFBSyxRQUNuQyxJQUFJLFFBQVEsR0FBRyxNQUFNLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO0FBQzlHLFFBQVEsT0FBTyxRQUFRLENBQUM7QUFDeEIsSUFBSSxDQUFDO0FBQ0w7MERBdkdDLFVBQVU7b0pBQ1Q7QUFBRTtBQUNVLFlBbEJMLHFCQUFxQjtBQUFLLFlBQzFCLGFBQWE7QUFBSTs7OztBQUpBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUdBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFHQSxBQUhBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFIQSxBQUFBLEFBQUEsQUFBQSxBQUdBLEFBR0EsQUFBQSxBQUFBLEFBQUEsQUFNQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFKQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBRUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUF0R0EsQUFBQSxBQWhCQSxBQUFBLEFBQ0EsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgSm95cmlkZVN0ZXAgfSBmcm9tICcuLi9tb2RlbHMvam95cmlkZS1zdGVwLmNsYXNzJztcclxuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBKb3lyaWRlT3B0aW9uc1NlcnZpY2UgfSBmcm9tICcuL2pveXJpZGUtb3B0aW9ucy5zZXJ2aWNlJztcclxuaW1wb3J0IHsgTG9nZ2VyU2VydmljZSB9IGZyb20gJy4vbG9nZ2VyLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBKb3lyaWRlRXJyb3IsIEpveXJpZGVTdGVwT3V0T2ZSYW5nZSB9IGZyb20gJy4uL21vZGVscy9qb3lyaWRlLWVycm9yLmNsYXNzJztcclxuXHJcbmNvbnN0IFJPVVRFX1NFUEFSQVRPUiA9ICdAJztcclxuXHJcbmNsYXNzIFN0ZXAge1xyXG4gICAgaWQ6IHN0cmluZztcclxuICAgIHN0ZXA6IEpveXJpZGVTdGVwO1xyXG59XHJcblxyXG5leHBvcnQgZW51bSBTdGVwQWN0aW9uVHlwZSB7XHJcbiAgICBORVhUID0gJ05FWFQnLFxyXG4gICAgUFJFViA9ICdQUkVWJ1xyXG59XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBKb3lyaWRlU3RlcHNDb250YWluZXJTZXJ2aWNlIHtcclxuICAgIHByaXZhdGUgc3RlcHM6IFN0ZXBbXTtcclxuICAgIHByaXZhdGUgdGVtcFN0ZXBzOiBKb3lyaWRlU3RlcFtdID0gW107XHJcbiAgICBwcml2YXRlIGN1cnJlbnRTdGVwSW5kZXggPSAtMjtcclxuICAgIHN0ZXBIYXNCZWVuTW9kaWZpZWQ6IFN1YmplY3Q8Sm95cmlkZVN0ZXA+ID0gbmV3IFN1YmplY3Q8Sm95cmlkZVN0ZXA+KCk7XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBzdGVwT3B0aW9uczogSm95cmlkZU9wdGlvbnNTZXJ2aWNlLCBwcml2YXRlIHJlYWRvbmx5IGxvZ2dlcjogTG9nZ2VyU2VydmljZSkge31cclxuXHJcbiAgICBwcml2YXRlIGdldEZpcnN0U3RlcEluZGV4KCk6IG51bWJlciB7XHJcbiAgICAgICAgY29uc3QgZmlyc3RTdGVwID0gdGhpcy5zdGVwT3B0aW9ucy5nZXRGaXJzdFN0ZXAoKTtcclxuICAgICAgICBjb25zdCBzdGVwSWRzID0gdGhpcy5zdGVwT3B0aW9ucy5nZXRTdGVwc09yZGVyKCk7XHJcblxyXG4gICAgICAgIGxldCBpbmRleCA9IHN0ZXBJZHMuaW5kZXhPZihmaXJzdFN0ZXApO1xyXG4gICAgICAgIGlmIChpbmRleCA8IDApIHtcclxuICAgICAgICAgICAgaW5kZXggPSAwO1xyXG4gICAgICAgICAgICBpZiAoZmlyc3RTdGVwICE9PSB1bmRlZmluZWQpIHRoaXMubG9nZ2VyLndhcm4oYFRoZSBzdGVwICR7Zmlyc3RTdGVwfSBkb2VzIG5vdCBleGlzdC4gQ2hlY2sgaW4geW91ciBzdGVwIGxpc3QgaWYgaXQncyBwcmVzZW50LmApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGluZGV4O1xyXG4gICAgfVxyXG5cclxuICAgIGluaXQoKSB7XHJcbiAgICAgICAgdGhpcy5sb2dnZXIuaW5mbygnSW5pdGlhbGl6aW5nIHRoZSBzdGVwcyBhcnJheS4nKTtcclxuICAgICAgICB0aGlzLnN0ZXBzID0gW107XHJcbiAgICAgICAgdGhpcy5jdXJyZW50U3RlcEluZGV4ID0gdGhpcy5nZXRGaXJzdFN0ZXBJbmRleCgpIC0gMTtcclxuICAgICAgICBsZXQgc3RlcElkcyA9IHRoaXMuc3RlcE9wdGlvbnMuZ2V0U3RlcHNPcmRlcigpO1xyXG4gICAgICAgIHN0ZXBJZHMuZm9yRWFjaChzdGVwSWQgPT4gdGhpcy5zdGVwcy5wdXNoKHsgaWQ6IHN0ZXBJZCwgc3RlcDogbnVsbCB9KSk7XHJcbiAgICB9XHJcblxyXG4gICAgYWRkU3RlcChzdGVwVG9BZGQ6IEpveXJpZGVTdGVwKSB7XHJcbiAgICAgICAgbGV0IHN0ZXBFeGlzdCA9IHRoaXMudGVtcFN0ZXBzLmZpbHRlcihzdGVwID0+IHN0ZXAubmFtZSA9PT0gc3RlcFRvQWRkLm5hbWUpLmxlbmd0aCA+IDA7XHJcbiAgICAgICAgaWYgKCFzdGVwRXhpc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5sb2dnZXIuaW5mbyhgQWRkaW5nIHN0ZXAgJHtzdGVwVG9BZGQubmFtZX0gdG8gdGhlIHN0ZXBzIGxpc3QuYCk7XHJcbiAgICAgICAgICAgIHRoaXMudGVtcFN0ZXBzLnB1c2goc3RlcFRvQWRkKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBsZXQgc3RlcEluZGV4VG9SZXBsYWNlID0gdGhpcy50ZW1wU3RlcHMuZmluZEluZGV4KHN0ZXAgPT4gc3RlcC5uYW1lID09PSBzdGVwVG9BZGQubmFtZSk7XHJcbiAgICAgICAgICAgIHRoaXMudGVtcFN0ZXBzW3N0ZXBJbmRleFRvUmVwbGFjZV0gPSBzdGVwVG9BZGQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZ2V0KGFjdGlvbjogU3RlcEFjdGlvblR5cGUpOiBKb3lyaWRlU3RlcCB7XHJcbiAgICAgICAgaWYgKGFjdGlvbiA9PT0gU3RlcEFjdGlvblR5cGUuTkVYVCkgdGhpcy5jdXJyZW50U3RlcEluZGV4Kys7XHJcbiAgICAgICAgZWxzZSB0aGlzLmN1cnJlbnRTdGVwSW5kZXgtLTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudFN0ZXBJbmRleCA8IDAgfHwgdGhpcy5jdXJyZW50U3RlcEluZGV4ID49IHRoaXMuc3RlcHMubGVuZ3RoKVxyXG4gICAgICAgICAgICB0aHJvdyBuZXcgSm95cmlkZVN0ZXBPdXRPZlJhbmdlKCdUaGUgZmlyc3Qgb3IgbGFzdCBzdGVwIG9mIHRoZSB0b3VyIGNhbm5vdCBiZSBmb3VuZCEnKTtcclxuXHJcbiAgICAgICAgY29uc3Qgc3RlcE5hbWUgPSB0aGlzLmdldFN0ZXBOYW1lKHRoaXMuc3RlcHNbdGhpcy5jdXJyZW50U3RlcEluZGV4XS5pZCk7XHJcbiAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLnRlbXBTdGVwcy5maW5kSW5kZXgoc3RlcCA9PiBzdGVwLm5hbWUgPT09IHN0ZXBOYW1lKTtcclxuICAgICAgICBsZXQgc3RlcEZvdW5kID0gdGhpcy50ZW1wU3RlcHNbaW5kZXhdO1xyXG4gICAgICAgIHRoaXMuc3RlcHNbdGhpcy5jdXJyZW50U3RlcEluZGV4XS5zdGVwID0gc3RlcEZvdW5kO1xyXG5cclxuICAgICAgICBpZiAoc3RlcEZvdW5kID09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5sb2dnZXIud2FybihgU3RlcCAke3RoaXMuc3RlcHNbdGhpcy5jdXJyZW50U3RlcEluZGV4XS5pZH0gbm90IGZvdW5kIGluIHRoZSBET00uIENoZWNrIGlmIGl0J3MgaGlkZGVuIGJ5ICpuZ0lmIGRpcmVjdGl2ZS5gKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBzdGVwRm91bmQ7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0U3RlcFJvdXRlKGFjdGlvbjogU3RlcEFjdGlvblR5cGUpIHtcclxuICAgICAgICBsZXQgc3RlcElEOiBzdHJpbmc7XHJcbiAgICAgICAgaWYgKGFjdGlvbiA9PT0gU3RlcEFjdGlvblR5cGUuTkVYVCkge1xyXG4gICAgICAgICAgICBzdGVwSUQgPSB0aGlzLnN0ZXBzW3RoaXMuY3VycmVudFN0ZXBJbmRleCArIDFdID8gdGhpcy5zdGVwc1t0aGlzLmN1cnJlbnRTdGVwSW5kZXggKyAxXS5pZCA6IG51bGw7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgc3RlcElEID0gdGhpcy5zdGVwc1t0aGlzLmN1cnJlbnRTdGVwSW5kZXggLSAxXSA/IHRoaXMuc3RlcHNbdGhpcy5jdXJyZW50U3RlcEluZGV4IC0gMV0uaWQgOiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgc3RlcFJvdXRlID0gc3RlcElEICYmIHN0ZXBJRC5pbmNsdWRlcyhST1VURV9TRVBBUkFUT1IpID8gc3RlcElELnNwbGl0KFJPVVRFX1NFUEFSQVRPUilbMV0gOiAnJztcclxuXHJcbiAgICAgICAgcmV0dXJuIHN0ZXBSb3V0ZTtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVQb3NpdGlvbihzdGVwTmFtZTogc3RyaW5nLCBwb3NpdGlvbjogc3RyaW5nKSB7XHJcbiAgICAgICAgbGV0IGluZGV4ID0gdGhpcy5nZXRTdGVwSW5kZXgoc3RlcE5hbWUpO1xyXG4gICAgICAgIGlmICh0aGlzLnN0ZXBzW2luZGV4XS5zdGVwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3RlcHNbaW5kZXhdLnN0ZXAucG9zaXRpb24gPSBwb3NpdGlvbjtcclxuICAgICAgICAgICAgdGhpcy5zdGVwSGFzQmVlbk1vZGlmaWVkLm5leHQodGhpcy5zdGVwc1tpbmRleF0uc3RlcCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5sb2dnZXIud2FybihcclxuICAgICAgICAgICAgICAgIGBUcnlpbmcgdG8gbW9kaWZ5IHRoZSBwb3NpdGlvbiBvZiAke3N0ZXBOYW1lfSB0byAke3Bvc2l0aW9ufS4gU3RlcCBub3QgZm91bmQhSXMgdGhpcyBzdGVwIGxvY2F0ZWQgaW4gYSBkaWZmZXJlbnQgcm91dGU/YFxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGdldFN0ZXBOdW1iZXIoc3RlcE5hbWU6IHN0cmluZyk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U3RlcEluZGV4KHN0ZXBOYW1lKSArIDE7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0U3RlcHNDb3VudCgpIHtcclxuICAgICAgICBsZXQgc3RlcHNPcmRlciA9IHRoaXMuc3RlcE9wdGlvbnMuZ2V0U3RlcHNPcmRlcigpO1xyXG4gICAgICAgIHJldHVybiBzdGVwc09yZGVyLmxlbmd0aDtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGdldFN0ZXBJbmRleChzdGVwTmFtZTogc3RyaW5nKTogbnVtYmVyIHtcclxuICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMuc3RlcHNcclxuICAgICAgICAgICAgLm1hcChzdGVwID0+IChzdGVwLmlkLmluY2x1ZGVzKFJPVVRFX1NFUEFSQVRPUikgPyBzdGVwLmlkLnNwbGl0KFJPVVRFX1NFUEFSQVRPUilbMF0gOiBzdGVwLmlkKSlcclxuICAgICAgICAgICAgLmZpbmRJbmRleChuYW1lID0+IHN0ZXBOYW1lID09PSBuYW1lKTtcclxuICAgICAgICBpZiAoaW5kZXggPT09IC0xKSB0aHJvdyBuZXcgSm95cmlkZUVycm9yKGBUaGUgc3RlcCB3aXRoIG5hbWU6ICR7c3RlcE5hbWV9IGRvZXMgbm90IGV4aXN0IGluIHRoZSBzdGVwIGxpc3QuYCk7XHJcbiAgICAgICAgcmV0dXJuIGluZGV4O1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZ2V0U3RlcE5hbWUoc3RlcElEOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgICAgIGxldCBzdGVwTmFtZSA9IHN0ZXBJRCAmJiBzdGVwSUQuaW5jbHVkZXMoUk9VVEVfU0VQQVJBVE9SKSA/IHN0ZXBJRC5zcGxpdChST1VURV9TRVBBUkFUT1IpWzBdIDogc3RlcElEO1xyXG4gICAgICAgIHJldHVybiBzdGVwTmFtZTtcclxuICAgIH1cclxufVxyXG4iXX0=