import { Injectable } from '@angular/core';
import { JoyrideOptionsService } from './joyride-options.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './joyride-options.service';
const JOYRIDE = 'ngx-joyride:::';
export class LoggerService {
    constructor(optionService) {
        this.optionService = optionService;
    }
    debug(message, data = "") {
        if (this.optionService.areLogsEnabled()) {
            console.debug(JOYRIDE + message, data);
        }
    }
    info(message, data = "") {
        if (this.optionService.areLogsEnabled()) {
            console.info(JOYRIDE + message, data);
        }
    }
    warn(message, data = "") {
        if (this.optionService.areLogsEnabled()) {
            console.warn(JOYRIDE + message, data);
        }
    }
    error(message, data = "") {
        if (this.optionService.areLogsEnabled()) {
            console.error(JOYRIDE + message, data);
        }
    }
}
LoggerService.ɵfac = function LoggerService_Factory(t) { return new (t || LoggerService)(ɵngcc0.ɵɵinject(ɵngcc1.JoyrideOptionsService)); };
LoggerService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: LoggerService, factory: LoggerService.ɵfac });
LoggerService.ctorParameters = () => [
    { type: JoyrideOptionsService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LoggerService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.JoyrideOptionsService }]; }, null); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1qb3lyaWRlL3NyYy9saWIvc2VydmljZXMvbG9nZ2VyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQzs7O0FBRWxFLE1BQU0sT0FBTyxHQUFHLGdCQUFnQixDQUFDO0FBR2pDLE1BQU0sT0FBTyxhQUFhO0FBQzFCLElBQ0ksWUFBNkIsYUFBb0M7QUFBSyxRQUF6QyxrQkFBYSxHQUFiLGFBQWEsQ0FBdUI7QUFBRSxJQUFFLENBQUM7QUFDMUUsSUFDSSxLQUFLLENBQUMsT0FBZ0IsRUFBRSxPQUFZLEVBQUU7QUFDMUMsUUFBUSxJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsY0FBYyxFQUFFLEVBQUU7QUFDakQsWUFBWSxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDbkQsU0FBUztBQUNULElBQUksQ0FBQztBQUNMLElBQ0ksSUFBSSxDQUFDLE9BQWdCLEVBQUUsT0FBWSxFQUFFO0FBQ3pDLFFBQVEsSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLGNBQWMsRUFBRSxFQUFFO0FBQ2pELFlBQVksT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ2xELFNBQVM7QUFDVCxJQUFJLENBQUM7QUFDTCxJQUNJLElBQUksQ0FBQyxPQUFnQixFQUFFLE9BQVksRUFBRTtBQUN6QyxRQUFRLElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxjQUFjLEVBQUUsRUFBRTtBQUNqRCxZQUFZLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQztBQUNsRCxTQUFTO0FBQ1QsSUFBSSxDQUFDO0FBQ0wsSUFDSSxLQUFLLENBQUMsT0FBZ0IsRUFBRSxPQUFZLEVBQUU7QUFDMUMsUUFBUSxJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsY0FBYyxFQUFFLEVBQUU7QUFDakQsWUFBWSxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDbkQsU0FBUztBQUNULElBQUksQ0FBQztBQUNMOzJDQTVCQyxVQUFVO3VHQUNUO0FBQUU7QUFFUSxZQVBILHFCQUFxQjtBQUFJOzs7O0FBREEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFHQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUEzQkEsQUFBQSxBQUpBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEpveXJpZGVPcHRpb25zU2VydmljZSB9IGZyb20gJy4vam95cmlkZS1vcHRpb25zLnNlcnZpY2UnO1xyXG5cclxuY29uc3QgSk9ZUklERSA9ICduZ3gtam95cmlkZTo6Oic7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBMb2dnZXJTZXJ2aWNlIHtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IG9wdGlvblNlcnZpY2U6IEpveXJpZGVPcHRpb25zU2VydmljZSkgeyB9XHJcblxyXG4gICAgZGVidWcobWVzc2FnZT86IHN0cmluZywgZGF0YTogYW55ID0gXCJcIikge1xyXG4gICAgICAgIGlmICh0aGlzLm9wdGlvblNlcnZpY2UuYXJlTG9nc0VuYWJsZWQoKSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmRlYnVnKEpPWVJJREUgKyBtZXNzYWdlLCBkYXRhKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaW5mbyhtZXNzYWdlPzogc3RyaW5nLCBkYXRhOiBhbnkgPSBcIlwiKSB7XHJcbiAgICAgICAgaWYgKHRoaXMub3B0aW9uU2VydmljZS5hcmVMb2dzRW5hYmxlZCgpKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuaW5mbyhKT1lSSURFICsgbWVzc2FnZSwgZGF0YSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHdhcm4obWVzc2FnZT86IHN0cmluZywgZGF0YTogYW55ID0gXCJcIikge1xyXG4gICAgICAgIGlmICh0aGlzLm9wdGlvblNlcnZpY2UuYXJlTG9nc0VuYWJsZWQoKSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oSk9ZUklERSArIG1lc3NhZ2UsIGRhdGEpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBlcnJvcihtZXNzYWdlPzogc3RyaW5nLCBkYXRhOiBhbnkgPSBcIlwiKSB7XHJcbiAgICAgICAgaWYgKHRoaXMub3B0aW9uU2VydmljZS5hcmVMb2dzRW5hYmxlZCgpKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoSk9ZUklERSArIG1lc3NhZ2UsIGRhdGEpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbn0iXX0=