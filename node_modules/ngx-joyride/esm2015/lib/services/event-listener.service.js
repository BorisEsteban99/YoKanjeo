import { Injectable, RendererFactory2 } from '@angular/core';
import { Subject } from 'rxjs';
import { DomRefService } from './dom.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './dom.service';
export class Scroll {
}
export class EventListenerService {
    constructor(rendererFactory, DOMService) {
        this.rendererFactory = rendererFactory;
        this.DOMService = DOMService;
        this.scrollEvent = new Subject();
        this.resizeEvent = new Subject();
        this.renderer = rendererFactory.createRenderer(null, null);
    }
    startListeningScrollEvents() {
        this.scrollUnlisten = this.renderer.listen('document', 'scroll', evt => {
            this.scrollEvent.next({
                scrollX: this.DOMService.getNativeWindow().pageXOffset,
                scrollY: this.DOMService.getNativeWindow().pageYOffset
            });
        });
    }
    startListeningResizeEvents() {
        this.resizeUnlisten = this.renderer.listen('window', 'resize', evt => {
            this.resizeEvent.next(evt);
        });
    }
    stopListeningScrollEvents() {
        this.scrollUnlisten();
    }
    stopListeningResizeEvents() {
        this.resizeUnlisten();
    }
}
EventListenerService.ɵfac = function EventListenerService_Factory(t) { return new (t || EventListenerService)(ɵngcc0.ɵɵinject(ɵngcc0.RendererFactory2), ɵngcc0.ɵɵinject(ɵngcc1.DomRefService)); };
EventListenerService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: EventListenerService, factory: EventListenerService.ɵfac });
EventListenerService.ctorParameters = () => [
    { type: RendererFactory2 },
    { type: DomRefService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(EventListenerService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc0.RendererFactory2 }, { type: ɵngcc1.DomRefService }]; }, null); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnQtbGlzdGVuZXIuc2VydmljZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LWpveXJpZGUvc3JjL2xpYi9zZXJ2aWNlcy9ldmVudC1saXN0ZW5lci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQWEsZ0JBQWdCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDeEUsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMvQixPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sZUFBZSxDQUFDOzs7QUFFOUMsTUFBTSxPQUFPLE1BQU07QUFDbkIsQ0FFQztBQUdELE1BQU0sT0FBTyxvQkFBb0I7QUFDakMsSUFPSSxZQUE2QixlQUFpQyxFQUFtQixVQUF5QjtBQUM5RyxRQURpQyxvQkFBZSxHQUFmLGVBQWUsQ0FBa0I7QUFBRSxRQUFpQixlQUFVLEdBQVYsVUFBVSxDQUFlO0FBQUUsUUFINUcsZ0JBQVcsR0FBb0IsSUFBSSxPQUFPLEVBQVUsQ0FBQztBQUN6RCxRQUFJLGdCQUFXLEdBQW9CLElBQUksT0FBTyxFQUFVLENBQUM7QUFDekQsUUFFUSxJQUFJLENBQUMsUUFBUSxHQUFHLGVBQWUsQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ25FLElBQUksQ0FBQztBQUNMLElBQ0ksMEJBQTBCO0FBQzlCLFFBQVEsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUUsUUFBUSxFQUFFLEdBQUcsQ0FBQyxFQUFFO0FBQy9FLFlBQVksSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUM7QUFDbEMsZ0JBQWdCLE9BQU8sRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLGVBQWUsRUFBRSxDQUFDLFdBQVc7QUFDdEUsZ0JBQWdCLE9BQU8sRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLGVBQWUsRUFBRSxDQUFDLFdBQVc7QUFDdEUsYUFBYSxDQUFDLENBQUM7QUFDZixRQUFRLENBQUMsQ0FBQyxDQUFDO0FBQ1gsSUFBSSxDQUFDO0FBQ0wsSUFDSSwwQkFBMEI7QUFDOUIsUUFBUSxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxRQUFRLEVBQUUsR0FBRyxDQUFDLEVBQUU7QUFDN0UsWUFBWSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUN2QyxRQUFRLENBQUMsQ0FBQyxDQUFDO0FBQ1gsSUFBSSxDQUFDO0FBQ0wsSUFDSSx5QkFBeUI7QUFDN0IsUUFBUSxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7QUFDOUIsSUFBSSxDQUFDO0FBQ0wsSUFDSSx5QkFBeUI7QUFDN0IsUUFBUSxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7QUFDOUIsSUFBSSxDQUFDO0FBQ0w7a0RBbkNDLFVBQVU7NEhBQ1Q7QUFBRTtBQUNVLFlBWGtCLGdCQUFnQjtBQUFLLFlBRTVDLGFBQWE7QUFBSTs7OztBQUZBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUdBLEFBR0EsQUFBQSxBQUFBLEFBQUEsQUFRQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFIQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBR0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFsQ0EsQUFBQSxBQVRBLEFBQUEsQUFFQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgUmVuZGVyZXIyLCBSZW5kZXJlckZhY3RvcnkyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgRG9tUmVmU2VydmljZSB9IGZyb20gJy4vZG9tLnNlcnZpY2UnO1xyXG5cclxuZXhwb3J0IGNsYXNzIFNjcm9sbCB7XHJcbiAgICBzY3JvbGxYOiBudW1iZXI7XHJcbiAgICBzY3JvbGxZOiBudW1iZXI7XHJcbn1cclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIEV2ZW50TGlzdGVuZXJTZXJ2aWNlIHtcclxuICAgIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMjtcclxuICAgIHByaXZhdGUgc2Nyb2xsVW5saXN0ZW46IGFueTtcclxuICAgIHByaXZhdGUgcmVzaXplVW5saXN0ZW46IGFueTtcclxuXHJcbiAgICBzY3JvbGxFdmVudDogU3ViamVjdDxTY3JvbGw+ID0gbmV3IFN1YmplY3Q8U2Nyb2xsPigpO1xyXG4gICAgcmVzaXplRXZlbnQ6IFN1YmplY3Q8bnVtYmVyPiA9IG5ldyBTdWJqZWN0PG51bWJlcj4oKTtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IHJlbmRlcmVyRmFjdG9yeTogUmVuZGVyZXJGYWN0b3J5MiwgcHJpdmF0ZSByZWFkb25seSBET01TZXJ2aWNlOiBEb21SZWZTZXJ2aWNlKSB7XHJcbiAgICAgICAgdGhpcy5yZW5kZXJlciA9IHJlbmRlcmVyRmFjdG9yeS5jcmVhdGVSZW5kZXJlcihudWxsLCBudWxsKTtcclxuICAgIH1cclxuXHJcbiAgICBzdGFydExpc3RlbmluZ1Njcm9sbEV2ZW50cygpIHtcclxuICAgICAgICB0aGlzLnNjcm9sbFVubGlzdGVuID0gdGhpcy5yZW5kZXJlci5saXN0ZW4oJ2RvY3VtZW50JywgJ3Njcm9sbCcsIGV2dCA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuc2Nyb2xsRXZlbnQubmV4dCh7XHJcbiAgICAgICAgICAgICAgICBzY3JvbGxYOiB0aGlzLkRPTVNlcnZpY2UuZ2V0TmF0aXZlV2luZG93KCkucGFnZVhPZmZzZXQsXHJcbiAgICAgICAgICAgICAgICBzY3JvbGxZOiB0aGlzLkRPTVNlcnZpY2UuZ2V0TmF0aXZlV2luZG93KCkucGFnZVlPZmZzZXRcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhcnRMaXN0ZW5pbmdSZXNpemVFdmVudHMoKSB7XHJcbiAgICAgICAgdGhpcy5yZXNpemVVbmxpc3RlbiA9IHRoaXMucmVuZGVyZXIubGlzdGVuKCd3aW5kb3cnLCAncmVzaXplJywgZXZ0ID0+IHtcclxuICAgICAgICAgICAgdGhpcy5yZXNpemVFdmVudC5uZXh0KGV2dCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RvcExpc3RlbmluZ1Njcm9sbEV2ZW50cygpIHtcclxuICAgICAgICB0aGlzLnNjcm9sbFVubGlzdGVuKCk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RvcExpc3RlbmluZ1Jlc2l6ZUV2ZW50cygpIHtcclxuICAgICAgICB0aGlzLnJlc2l6ZVVubGlzdGVuKCk7XHJcbiAgICB9XHJcbn1cclxuIl19