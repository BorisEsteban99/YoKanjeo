import { Injectable, Inject, PLATFORM_ID } from '@angular/core';
import { DomRefService } from './dom.service';
import { isPlatformBrowser } from "@angular/common";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './dom.service';
export class DocumentService {
    constructor(DOMService, platformId) {
        this.DOMService = DOMService;
        if (!isPlatformBrowser(platformId)) {
            return;
        }
        this.setDocumentHeight();
        var doc = DOMService.getNativeDocument();
        if (doc && !doc.elementsFromPoint) {
            // IE 11 - Edge browsers
            doc.elementsFromPoint = this.elementsFromPoint.bind(this);
        }
    }
    getElementFixedTop(elementRef) {
        return elementRef.nativeElement.getBoundingClientRect().top;
    }
    getElementFixedLeft(elementRef) {
        return elementRef.nativeElement.getBoundingClientRect().left;
    }
    getElementAbsoluteTop(elementRef) {
        const scrollOffsets = this.getScrollOffsets();
        return (elementRef.nativeElement.getBoundingClientRect().top +
            scrollOffsets.y);
    }
    getElementAbsoluteLeft(elementRef) {
        const scrollOffsets = this.getScrollOffsets();
        return (elementRef.nativeElement.getBoundingClientRect().left +
            scrollOffsets.x);
    }
    setDocumentHeight() {
        this.documentHeight = this.calculateDocumentHeight();
    }
    getDocumentHeight() {
        return this.documentHeight;
    }
    isParentScrollable(elementRef) {
        return (this.getFirstScrollableParent(elementRef.nativeElement) !==
            this.DOMService.getNativeDocument().body);
    }
    isElementBeyondOthers(elementRef, isElementFixed, keywordToDiscard) {
        const x1 = isElementFixed
            ? this.getElementFixedLeft(elementRef)
            : this.getElementAbsoluteLeft(elementRef);
        const y1 = isElementFixed
            ? this.getElementFixedTop(elementRef)
            : this.getElementAbsoluteTop(elementRef);
        const x2 = x1 + elementRef.nativeElement.getBoundingClientRect().width - 1;
        const y2 = y1 + elementRef.nativeElement.getBoundingClientRect().height - 1;
        const elements1 = this.DOMService.getNativeDocument().elementsFromPoint(x1, y1);
        const elements2 = this.DOMService.getNativeDocument().elementsFromPoint(x2, y2);
        if (elements1.length === 0 && elements2.length === 0)
            return 1;
        if (this.getFirstElementWithoutKeyword(elements1, keywordToDiscard) !==
            elementRef.nativeElement ||
            this.getFirstElementWithoutKeyword(elements2, keywordToDiscard) !==
                elementRef.nativeElement) {
            return 2;
        }
        return 3;
    }
    scrollIntoView(elementRef, isElementFixed) {
        const firstScrollableParent = this.getFirstScrollableParent(elementRef.nativeElement);
        const top = isElementFixed
            ? this.getElementFixedTop(elementRef)
            : this.getElementAbsoluteTop(elementRef);
        if (firstScrollableParent !== this.DOMService.getNativeDocument().body) {
            if (firstScrollableParent.scrollTo) {
                firstScrollableParent.scrollTo(0, top - 150);
            }
            else {
                // IE 11 - Edge browsers
                firstScrollableParent.scrollTop = top - 150;
            }
        }
        else {
            this.DOMService.getNativeWindow().scrollTo(0, top - 150);
        }
    }
    scrollToTheTop(elementRef) {
        const firstScrollableParent = this.getFirstScrollableParent(elementRef.nativeElement);
        if (firstScrollableParent !== this.DOMService.getNativeDocument().body) {
            if (firstScrollableParent.scrollTo) {
                firstScrollableParent.scrollTo(0, 0);
            }
            else {
                // IE 11 - Edge browsers
                firstScrollableParent.scrollTop = 0;
            }
        }
        else {
            this.DOMService.getNativeWindow().scrollTo(0, 0);
        }
    }
    scrollToTheBottom(elementRef) {
        const firstScrollableParent = this.getFirstScrollableParent(elementRef.nativeElement);
        if (firstScrollableParent !== this.DOMService.getNativeDocument().body) {
            if (firstScrollableParent.scrollTo) {
                firstScrollableParent.scrollTo(0, this.DOMService.getNativeDocument().body.scrollHeight);
            }
            else {
                // IE 11 - Edge browsers
                firstScrollableParent.scrollTop =
                    firstScrollableParent.scrollHeight -
                        firstScrollableParent.clientHeight;
            }
        }
        else {
            this.DOMService.getNativeWindow().scrollTo(0, this.DOMService.getNativeDocument().body.scrollHeight);
        }
    }
    getFirstScrollableParent(node) {
        const regex = /(auto|scroll|overlay)/;
        const style = (node, prop) => this.DOMService.getNativeWindow()
            .getComputedStyle(node, null)
            .getPropertyValue(prop);
        const scroll = (node) => regex.test(style(node, 'overflow') +
            style(node, 'overflow-y') +
            style(node, 'overflow-x'));
        const scrollparent = (node) => {
            return !node || node === this.DOMService.getNativeDocument().body
                ? this.DOMService.getNativeDocument().body
                : scroll(node)
                    ? node
                    : scrollparent(node.parentNode);
        };
        return scrollparent(node);
    }
    calculateDocumentHeight() {
        const documentRef = this.DOMService.getNativeDocument();
        return Math.max(documentRef.body.scrollHeight, documentRef.documentElement.scrollHeight, documentRef.body.offsetHeight, documentRef.documentElement.offsetHeight, documentRef.body.clientHeight, documentRef.documentElement.clientHeight);
    }
    getScrollOffsets() {
        const winReference = this.DOMService.getNativeWindow();
        const docReference = this.DOMService.getNativeDocument();
        // This works for all browsers except IE versions 8 and before
        if (winReference.pageXOffset != null)
            return { x: winReference.pageXOffset, y: winReference.pageYOffset };
        // For IE (or any browser) in Standards mode
        if (docReference.compatMode == 'CSS1Compat')
            return {
                x: docReference.documentElement.scrollLeft,
                y: docReference.documentElement.scrollTop
            };
        // For browsers in Quirks mode
        return {
            x: docReference.body.scrollLeft,
            y: docReference.body.scrollTop
        };
    }
    elementsFromPoint(x, y) {
        var parents = [];
        var parent = void 0;
        do {
            const elem = this.DOMService.getNativeDocument().elementFromPoint(x, y);
            if (elem && parent !== elem) {
                parent = elem;
                parents.push(parent);
                parent.style.pointerEvents = 'none';
            }
            else {
                parent = false;
            }
        } while (parent);
        parents.forEach(function (parent) {
            return (parent.style.pointerEvents = 'all');
        });
        return parents;
    }
    getFirstElementWithoutKeyword(elements, keyword) {
        while (elements[0] &&
            elements[0].classList.toString().includes(keyword)) {
            elements.shift();
        }
        return elements[0];
    }
}
DocumentService.ɵfac = function DocumentService_Factory(t) { return new (t || DocumentService)(ɵngcc0.ɵɵinject(ɵngcc1.DomRefService), ɵngcc0.ɵɵinject(PLATFORM_ID)); };
DocumentService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: DocumentService, factory: DocumentService.ɵfac });
DocumentService.ctorParameters = () => [
    { type: DomRefService },
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DocumentService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.DomRefService }, { type: Object, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }]; }, null); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,