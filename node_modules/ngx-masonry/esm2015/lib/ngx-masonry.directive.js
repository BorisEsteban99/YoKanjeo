import { Directive, Inject, ElementRef, forwardRef, Renderer2, Input } from '@angular/core';
import { style, animate, AnimationBuilder } from '@angular/animations';
import { NgxMasonryComponent } from './ngx-masonry.component';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/animations';
import * as ɵngcc2 from './ngx-masonry.component';
export class NgxMasonryDirective {
    constructor(element, builder, parent, renderer) {
        this.element = element;
        this.builder = builder;
        this.parent = parent;
        this.renderer = renderer;
        this.prepend = false;
        this.animations = {
            show: [
                style({ opacity: 0 }),
                animate('400ms ease-in', style({ opacity: 1 })),
            ],
            hide: [
                style({ opacity: '*' }),
                animate('400ms ease-in', style({ opacity: 0 })),
            ]
        };
    }
    ngOnInit() {
        if (this.parent.options.animations !== undefined) {
            this.animations = this.parent.options.animations;
        }
        this.renderer.setStyle(this.element.nativeElement, 'position', 'fixed');
        this.renderer.setStyle(this.element.nativeElement, 'right', '-150vw');
        this.parent.addPendingItem(this);
    }
    ngAfterViewInit() {
        const images = Array.from(this.element.nativeElement.getElementsByTagName('img'));
        if (images.length === 0) {
            setTimeout(() => {
                this.parent.add(this);
            });
        }
        else {
            this.images = new Set(images);
            for (const imageRef of images) {
                // skip image render check if image has `masonryLazy` attribute
                if (imageRef.hasAttribute('masonryLazy')) {
                    this.imageLoaded(imageRef);
                }
                else {
                    this.renderer.listen(imageRef, 'load', _ => {
                        this.imageLoaded(imageRef);
                    });
                    this.renderer.listen(imageRef, 'error', _ => {
                        this.imageLoaded(imageRef);
                    });
                }
            }
        }
    }
    ngOnDestroy() {
        if (this.images && this.images.size === 0 && this.element.nativeElement.parentNode) {
            this.playAnimation(false);
            this.parent.remove(this.element.nativeElement);
        }
    }
    imageLoaded(image) {
        this.images.delete(image);
        if (this.images.size === 0) {
            this.parent.add(this);
        }
    }
    playAnimation(show) {
        const metadata = show ? this.animations.show : this.animations.hide;
        if (metadata) {
            const player = this.builder.build(metadata).create(this.element.nativeElement);
            player.play();
        }
    }
}
NgxMasonryDirective.ɵfac = function NgxMasonryDirective_Factory(t) { return new (t || NgxMasonryDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AnimationBuilder), ɵngcc0.ɵɵdirectiveInject(forwardRef(() => NgxMasonryComponent)), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };
NgxMasonryDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NgxMasonryDirective, selectors: [["", "ngxMasonryItem", ""], ["ngxMasonryItem"]], inputs: { prepend: "prepend" } });
NgxMasonryDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: AnimationBuilder },
    { type: NgxMasonryComponent, decorators: [{ type: Inject, args: [forwardRef(() => NgxMasonryComponent),] }] },
    { type: Renderer2 }
];
NgxMasonryDirective.propDecorators = {
    prepend: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxMasonryDirective, [{
        type: Directive,
        args: [{
                selector: '[ngxMasonryItem], ngxMasonryItem'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.AnimationBuilder }, { type: ɵngcc2.NgxMasonryComponent, decorators: [{
                type: Inject,
                args: [forwardRef(() => NgxMasonryComponent)]
            }] }, { type: ɵngcc0.Renderer2 }]; }, { prepend: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,