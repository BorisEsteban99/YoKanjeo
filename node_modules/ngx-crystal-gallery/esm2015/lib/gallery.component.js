/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, Input, ElementRef, ViewChild } from '@angular/core';
import { CrystalLightbox } from './dom.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './dom.service';
import * as ɵngcc2 from '@angular/common';
import * as ɵngcc3 from './masonry-layout.component';

const _c0 = ["contentWrapper"];
function GalleryComponent_masonry_layout_3_Template(rf, ctx) { if (rf & 1) {
    const _r3 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "masonry-layout", 3);
    ɵngcc0.ɵɵlistener("events", function GalleryComponent_masonry_layout_3_Template_masonry_layout_events_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r2 = ɵngcc0.ɵɵnextContext(); return ctx_r2.handleMasonryLayoutEvents($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("max-height", ctx_r1.masonryMaxHeight)("gutter", ctx_r1.masonryGutter)("masonry", ctx_r1.masonryState)("class-name", "cg-image")("images", ctx_r1.images);
} }
const _c1 = ["*"];
export class GalleryComponent {
    /**
     * @param {?} lightbox
     * @param {?} elementRef
     */
    constructor(lightbox, elementRef) {
        this.lightbox = lightbox;
        this.elementRef = elementRef;
        this.config = {};
    }
    /**
     * @return {?}
     */
    get isNgContent() {
        return this.contentWrapper.nativeElement.children.length > 0;
    }
    /**
     * @return {?}
     */
    get masonryState() {
        return this.config.masonry;
    }
    /**
     * @return {?}
     */
    get masonryMaxHeight() {
        return this.config.masonryMaxHeight;
    }
    /**
     * @return {?}
     */
    get masonryGutter() {
        return this.config.masonryGutter;
    }
    /**
     * @param {?} images
     * @param {?} i
     * @return {?}
     */
    showLightbox(images, i) {
        this.config.index = i;
        this.lightbox.open(images, this.config);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    handleMasonryLayoutEvents(event) {
        this.showLightbox(this.images, event.index);
    }
}
GalleryComponent.ɵfac = function GalleryComponent_Factory(t) { return new (t || GalleryComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CrystalLightbox), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
GalleryComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: GalleryComponent, selectors: [["crystal-gallery"]], viewQuery: function GalleryComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, true);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.contentWrapper = _t.first);
    } }, inputs: { config: "config", images: "images" }, ngContentSelectors: _c1, decls: 4, vars: 2, consts: [[3, "hidden"], ["contentWrapper", ""], ["class", "cg-wrapper", 3, "max-height", "gutter", "masonry", "class-name", "images", "events", 4, "ngIf"], [1, "cg-wrapper", 3, "max-height", "gutter", "masonry", "class-name", "images", "events"]], template: function GalleryComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "div", 0, 1);
        ɵngcc0.ɵɵprojection(2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(3, GalleryComponent_masonry_layout_3_Template, 1, 5, "masonry-layout", 2);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("hidden", ctx.isNgContent);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.isNgContent);
    } }, directives: [ɵngcc2.NgIf, ɵngcc3.MasonryLayoutComponent], styles: ["[_nghost-%COMP%]{display:block;width:100%}[_nghost-%COMP%]   .cg-wrapper[_ngcontent-%COMP%]{display:block;width:100%;overflow:hidden}[_nghost-%COMP%]   .cg-wrapper.cg-show[_ngcontent-%COMP%]{height:auto;position:relative;display:table}[_nghost-%COMP%]   .cg-image[_ngcontent-%COMP%]   img[_ngcontent-%COMP%]{cursor:pointer;width:100%}"] });
/** @nocollapse */
GalleryComponent.ctorParameters = () => [
    { type: CrystalLightbox },
    { type: ElementRef }
];
GalleryComponent.propDecorators = {
    images: [{ type: Input, args: ['images',] }],
    config: [{ type: Input, args: ['config',] }],
    contentWrapper: [{ type: ViewChild, args: ['contentWrapper',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(GalleryComponent, [{
        type: Component,
        args: [{
                selector: 'crystal-gallery',
                template: `<div #contentWrapper [hidden]="isNgContent">
    <ng-content></ng-content>
</div>

<masonry-layout 
    class="cg-wrapper"
    *ngIf="!isNgContent" 

    [max-height]="masonryMaxHeight" 
    [gutter]="masonryGutter"
    [masonry]="masonryState"
    [class-name]="'cg-image'"
    [images]="images"
    (events)="handleMasonryLayoutEvents($event)"></masonry-layout>`,
                styles: [`:host{display:block;width:100%}:host .cg-wrapper{display:block;width:100%;overflow:hidden}:host .cg-wrapper.cg-show{height:auto;position:relative;display:table}:host .cg-image img{cursor:pointer;width:100%}`]
            }]
    }], function () { return [{ type: ɵngcc1.CrystalLightbox }, { type: ɵngcc0.ElementRef }]; }, { config: [{
            type: Input,
            args: ['config']
        }], images: [{
            type: Input,
            args: ['images']
        }], contentWrapper: [{
            type: ViewChild,
            args: ['contentWrapper']
        }] }); })();
if (false) {
    /** @type {?} */
    GalleryComponent.prototype.images;
    /** @type {?} */
    GalleryComponent.prototype.config;
    /** @type {?} */
    GalleryComponent.prototype.contentWrapper;
    /** @type {?} */
    GalleryComponent.prototype.lightbox;
    /** @type {?} */
    GalleryComponent.prototype.elementRef;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2FsbGVyeS5jb21wb25lbnQuanMiLCJzb3VyY2VzIjpbIm5neC1jcnlzdGFsLWdhbGxlcnkvbGliL2dhbGxlcnkuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBVSxVQUFVLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2hGLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBSyxlQUFlLENBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBb0I5QyxNQUFNO0FBRU47QUFBUztBQUNOO0FBQThCO0FBRS9CLElBa0JELFlBQ1MsVUFDQTtBQUFlLFFBRGYsYUFBUSxHQUFSLFFBQVE7QUFBRyxRQUNYLGVBQVUsR0FBVixVQUFVO0FBQUcsc0JBdEJZLEVBQUU7QUFFckMsS0FxQks7QUFFTDtBQUFTO0FBQW9CO0FBQVMsSUFyQmxDLElBQUksV0FBVztBQUNqQixRQUFNLE1BQU0sQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztBQUNwRSxLQUFJO0FBRUw7QUFBUztBQUNKO0FBQVMsSUFEVixJQUFJLFlBQVk7QUFDbEIsUUFBTSxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUM7QUFDbEMsS0FBSTtBQUVMO0FBQVM7QUFDUjtBQUFTLElBRE4sSUFBSSxnQkFBZ0I7QUFDdEIsUUFBRyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQztBQUN4QyxLQUFJO0FBRUw7QUFBUztBQUNMO0FBQVMsSUFEVCxJQUFJLGFBQWE7QUFDbkIsUUFBRyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUM7QUFDckMsS0FBSTtBQUVMO0FBQVM7QUFDWTtBQUNoQjtBQUFvQjtBQUN4QixJQUVBLFlBQVksQ0FBQyxNQUFXLEVBQUUsQ0FBUztBQUNsQyxRQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztBQUM3QixRQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDekMsS0FBQztBQUVGO0FBQVM7QUFBeUI7QUFDbEI7QUFBUyxJQURyQix5QkFBeUIsQ0FBQyxLQUFLO0FBQ2pDLFFBQU0sSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNuRCxLQUFJO0FBQ0o7OENBdERBLFNBQVMsU0FBQyxtQkFDVixRQUFRLEVBQUUsaUJBQWlCLG1CQUMzQixRQUFRLEVBQUU7Ozs7O3VEQWF3RCxtQkFDL0QsTUFBTSxFQUFFLENBQUM7c01BQWdOLENBQUMsZ0JBQzdOOzs7Ozs7Ozs7O2lhQUNNO0FBQUU7QUFBb0I7QUFHeEIsWUF2QkksZUFBZTtBQUFLLFlBRE0sVUFBVTtBQUFJO0FBQUk7QUFDNUMscUJBc0JKLEtBQUssU0FBQyxRQUFRO0FBQVEscUJBQ3RCLEtBQUssU0FBQyxRQUFRO0FBQVEsNkJBRXRCLFNBQVMsU0FBQyxnQkFBZ0I7QUFBTzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQUFFO0FBQUU7QUFBYztBQUV4QztBQUNpQjtBQUFzQjtBQUdyQztBQUNGO0FBR0s7QUFDTjtBQUdQO0FBQ0g7OztBQXpDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQW9CQSxBQUFBLEFBdUJBLEFBQ0EsQUFDQSxBQURBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUF0QkEsQUFBQSxBQXVCQSxBQW5CQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBRUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQU9BLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBckRBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBYUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQW5CQSxBQUFBLEFBREEsQUFBQSxBQXVCQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBPbkluaXQsIEVsZW1lbnRSZWYsIFZpZXdDaGlsZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ3J5c3RhbExpZ2h0Ym94IH0gZnJvbScuL2RvbS5zZXJ2aWNlJ1xuXG5AQ29tcG9uZW50KHtcblx0c2VsZWN0b3I6ICdjcnlzdGFsLWdhbGxlcnknLCBcblx0dGVtcGxhdGU6IGA8ZGl2ICNjb250ZW50V3JhcHBlciBbaGlkZGVuXT1cImlzTmdDb250ZW50XCI+XG4gICAgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxuPC9kaXY+XG5cbjxtYXNvbnJ5LWxheW91dCBcbiAgICBjbGFzcz1cImNnLXdyYXBwZXJcIlxuICAgICpuZ0lmPVwiIWlzTmdDb250ZW50XCIgXG5cbiAgICBbbWF4LWhlaWdodF09XCJtYXNvbnJ5TWF4SGVpZ2h0XCIgXG4gICAgW2d1dHRlcl09XCJtYXNvbnJ5R3V0dGVyXCJcbiAgICBbbWFzb25yeV09XCJtYXNvbnJ5U3RhdGVcIlxuICAgIFtjbGFzcy1uYW1lXT1cIidjZy1pbWFnZSdcIlxuICAgIFtpbWFnZXNdPVwiaW1hZ2VzXCJcbiAgICAoZXZlbnRzKT1cImhhbmRsZU1hc29ucnlMYXlvdXRFdmVudHMoJGV2ZW50KVwiPjwvbWFzb25yeS1sYXlvdXQ+YCxcbiAgICBzdHlsZXM6IFtgOmhvc3R7ZGlzcGxheTpibG9jazt3aWR0aDoxMDAlfTpob3N0IC5jZy13cmFwcGVye2Rpc3BsYXk6YmxvY2s7d2lkdGg6MTAwJTtvdmVyZmxvdzpoaWRkZW59Omhvc3QgLmNnLXdyYXBwZXIuY2ctc2hvd3toZWlnaHQ6YXV0bztwb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5OnRhYmxlfTpob3N0IC5jZy1pbWFnZSBpbWd7Y3Vyc29yOnBvaW50ZXI7d2lkdGg6MTAwJX1gXSxcbn0pXG5leHBvcnQgY2xhc3MgR2FsbGVyeUNvbXBvbmVudCB7XG5cbiAgICBASW5wdXQoJ2ltYWdlcycpIGltYWdlczogYW55O1xuICAgIEBJbnB1dCgnY29uZmlnJykgY29uZmlnOiBhbnkgPSB7fTtcblxuICAgIEBWaWV3Q2hpbGQoJ2NvbnRlbnRXcmFwcGVyJykgY29udGVudFdyYXBwZXI6IEVsZW1lbnRSZWY7XG5cbiAgICBnZXQgaXNOZ0NvbnRlbnQoKXtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGVudFdyYXBwZXIubmF0aXZlRWxlbWVudC5jaGlsZHJlbi5sZW5ndGggPiAwO1xuICAgIH1cblxuICAgIGdldCBtYXNvbnJ5U3RhdGUoKXtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29uZmlnLm1hc29ucnk7XG4gICAgfVxuXG4gICAgZ2V0IG1hc29ucnlNYXhIZWlnaHQoKXtcbiAgICBcdHJldHVybiB0aGlzLmNvbmZpZy5tYXNvbnJ5TWF4SGVpZ2h0O1xuICAgIH1cblxuICAgIGdldCBtYXNvbnJ5R3V0dGVyKCl7XG4gICAgXHRyZXR1cm4gdGhpcy5jb25maWcubWFzb25yeUd1dHRlcjtcbiAgICB9XG5cblx0Y29uc3RydWN0b3IoXG5cdFx0cHJpdmF0ZSBsaWdodGJveDogQ3J5c3RhbExpZ2h0Ym94LFxuXHRcdHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZlxuXHQpIHt9XG5cblx0c2hvd0xpZ2h0Ym94KGltYWdlczogYW55LCBpOiBudW1iZXIpe1xuICAgICAgICB0aGlzLmNvbmZpZy5pbmRleCA9IGk7XG5cdFx0dGhpcy5saWdodGJveC5vcGVuKGltYWdlcywgdGhpcy5jb25maWcpO1xuXHR9XG5cbiAgICBoYW5kbGVNYXNvbnJ5TGF5b3V0RXZlbnRzKGV2ZW50KXtcbiAgICAgICAgdGhpcy5zaG93TGlnaHRib3godGhpcy5pbWFnZXMsIGV2ZW50LmluZGV4KTtcbiAgICB9XG59Il19