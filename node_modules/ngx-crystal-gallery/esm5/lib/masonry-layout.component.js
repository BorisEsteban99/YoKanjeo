/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, ElementRef, HostListener, Input, Output, EventEmitter } from '@angular/core';
/**
 * @record
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';

function MasonryLayoutComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    var _r5 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 1);
    ɵngcc0.ɵɵelementStart(1, "img", 2, 3);
    ɵngcc0.ɵɵlistener("click", function MasonryLayoutComponent_div_0_Template_img_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r5); var image_r1 = ctx.$implicit; var i_r2 = ctx.index; var ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4.clickOnImage(image_r1, i_r2); })("load", function MasonryLayoutComponent_div_0_Template_img_load_1_listener() { ɵngcc0.ɵɵrestoreView(_r5); var _r3 = ɵngcc0.ɵɵreference(2); var ctx_r6 = ɵngcc0.ɵɵnextContext(); return ctx_r6.onImageLoaded(_r3); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var image_r1 = ctx.$implicit;
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵstyleProp("width", image_r1.computedWidth)("height", image_r1.computedHeight)("float", "left")("margin", image_r1.margin)("background", "#eeeeee")("line-height", 0);
    ɵngcc0.ɵɵproperty("ngClass", ctx_r0.CLASS_NAME);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵstyleProp("width", 100, "%")("height", "auto")("opacity", 0);
    ɵngcc0.ɵɵproperty("src", image_r1.preview || image_r1.full, ɵngcc0.ɵɵsanitizeUrl);
} }
export function Image() { }
/** @type {?} */
Image.prototype.path;
/** @type {?} */
Image.prototype.width;
/** @type {?} */
Image.prototype.height;
/** @type {?|undefined} */
Image.prototype.computedHeight;
/** @type {?|undefined} */
Image.prototype.computedWidth;
/** @type {?|undefined} */
Image.prototype.margin;
;
/**
 * @record
 */
export function Images() { }
var MasonryLayoutComponent = /** @class */ (function () {
    function MasonryLayoutComponent(elementRef) {
        this.elementRef = elementRef;
        this.GUTTER = 0;
        this.savedNodeDimensions = [];
        this.gridState = 'not started';
        this.ENABLE_MASONRY = true;
        this.MAX_HEIGHT = 400;
        this.events = new EventEmitter();
        this.elem = this.elementRef.nativeElement;
    }
    Object.defineProperty(MasonryLayoutComponent.prototype, "gutter", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.GUTTER = value / 2;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MasonryLayoutComponent.prototype, "isMobile", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var check = false;
            (function (a) { if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4)))
                check = true; })(navigator.userAgent || navigator.vendor);
            return check;
        },
        enumerable: true,
        configurable: true
    });
    ;
    /**
     * @param {?} event
     * @return {?}
     */
    MasonryLayoutComponent.prototype.onWindowResize = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        clearTimeout(this.resizeTimer);
        this.resizeTimer = setTimeout(function () {
            _this.gridState = 'not started';
            _this.buildGrid();
        }, 250);
    };
    /**
     * @return {?}
     */
    MasonryLayoutComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.buildGrid();
    };
    /**
     * @return {?}
     */
    MasonryLayoutComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        var _this = this;
        clearTimeout(this.changesTimer);
        this.changesTimer = setTimeout(function () {
            _this.gridState = 'not started';
            _this.buildGrid();
        }, 250);
    };
    /**
     * @return {?}
     */
    MasonryLayoutComponent.prototype.buildGrid = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var parentWidth = Math.floor(this.elem.parentNode.offsetWidth);
        /** @type {?} */
        var totalRowWidth = 0;
        /** @type {?} */
        var row = {
            startIndex: 0,
            endIndex: 0,
            length: 0,
            totalWidth: 0
        };
        if (!this.images || !this.images.length) {
            return;
        }
        this.elem.style.width = parentWidth + 'px';
        this.elem.style.display = 'table';
        this.images.forEach(function (node, index) {
            if (row.totalWidth === 0) {
                row.startIndex = index;
                row.length = 0;
            }
            row.length++;
            row.totalWidth += _this.getComputedWidth(index);
            if (row.totalWidth >= parentWidth || _this.isLastChild(index)) {
                row.endIndex = index;
                /** @type {?} */
                var scaling = row.totalWidth / parentWidth;
                _this.setColDimensions(scaling, row);
                row.totalWidth = 0;
            }
        });
    };
    /**
     * @param {?} scaling
     * @param {?} row
     * @return {?}
     */
    MasonryLayoutComponent.prototype.setColDimensions = /**
     * @param {?} scaling
     * @param {?} row
     * @return {?}
     */
    function (scaling, row) {
        var _this = this;
        /** @type {?} */
        var totalRowWidth = 0;
        /** @type {?} */
        var parentWidth = this.elem.parentNode.offsetWidth;
        scaling = (scaling < 1) ? 1 : scaling;
        this.images.forEach(function (node, index) {
            if (!_this.ENABLE_MASONRY) {
                node.computedHeight = _this.MAX_HEIGHT + 'px';
                node.computedWidth = _this.getComputedWidth(index) + 'px';
                node.margin = _this.getNodeMargin(parentWidth);
                return;
            }
            if (index >= row.startIndex && index <= row.endIndex) {
                /** @type {?} */
                var nodeWidth = void 0;
                // last image
                if (index === row.endIndex && scaling > 1) {
                    nodeWidth = (100 - totalRowWidth) - ((_this.GUTTER * 2) / parentWidth * 100);
                    node.computedWidth = 'calc(' + nodeWidth + '%)';
                    if (_this.gridState === 'not started') {
                        _this.gridState = 'pre-building';
                        setTimeout(function () {
                            _this.buildGrid();
                        }, 100);
                    }
                }
                else {
                    nodeWidth = ((_this.getComputedWidth(index) / scaling) / parentWidth * 100) - ((row.length * (_this.GUTTER * 2)) * (_this.getComputedWidth(index) / scaling) / parentWidth) / parentWidth * 100;
                    node.computedWidth = 'calc(' + nodeWidth + '%)';
                    totalRowWidth += nodeWidth;
                    totalRowWidth += (_this.GUTTER / parentWidth * 100) * 2;
                }
                // last row and last image
                if (index === row.endIndex && row.length === 1 && _this.isMobile) {
                    nodeWidth = 100 - ((_this.GUTTER * 2) / parentWidth * 100);
                    /** @type {?} */
                    var height = node.height * (parentWidth * (nodeWidth / 100) / node.width);
                    if (height / 2 < _this.MAX_HEIGHT) {
                        node.computedWidth = 'calc(' + nodeWidth + '%)';
                    }
                }
                node.margin = _this.getNodeMargin(parentWidth);
                node.computedHeight = node.height * (parentWidth * (nodeWidth / 100) / node.width) + 'px';
            }
        });
    };
    /**
     * @param {?} index
     * @return {?}
     */
    MasonryLayoutComponent.prototype.getComputedWidth = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        return this.images[index].width / (this.images[index].height / this.MAX_HEIGHT);
    };
    /**
     * @param {?} index
     * @return {?}
     */
    MasonryLayoutComponent.prototype.isLastChild = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        return index + 1 === this.images.length;
    };
    /**
     * @param {?} parentWidth
     * @return {?}
     */
    MasonryLayoutComponent.prototype.getNodeMargin = /**
     * @param {?} parentWidth
     * @return {?}
     */
    function (parentWidth) {
        return 'calc(' + this.GUTTER / parentWidth * 100 + '%)';
    };
    /**
     * @param {?} image
     * @param {?} i
     * @return {?}
     */
    MasonryLayoutComponent.prototype.clickOnImage = /**
     * @param {?} image
     * @param {?} i
     * @return {?}
     */
    function (image, i) {
        this.events.emit({
            type: 'click-on-image',
            image: image,
            index: i
        });
    };
    /**
     * @param {?} elem
     * @return {?}
     */
    MasonryLayoutComponent.prototype.onImageLoaded = /**
     * @param {?} elem
     * @return {?}
     */
    function (elem) {
        elem.style.opacity = 1;
    };
    /** @nocollapse */
    MasonryLayoutComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    MasonryLayoutComponent.propDecorators = {
        images: [{ type: Input, args: ['images',] }],
        ENABLE_MASONRY: [{ type: Input, args: ['masonry',] }],
        MAX_HEIGHT: [{ type: Input, args: ['max-height',] }],
        CLASS_NAME: [{ type: Input, args: ['class-name',] }],
        gutter: [{ type: Input, args: ['gutter',] }],
        events: [{ type: Output }],
        onWindowResize: [{ type: HostListener, args: ['window:resize', ['$event'],] }]
    };
MasonryLayoutComponent.ɵfac = function MasonryLayoutComponent_Factory(t) { return new (t || MasonryLayoutComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
MasonryLayoutComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MasonryLayoutComponent, selectors: [["masonry-layout"]], hostBindings: function MasonryLayoutComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("resize", function MasonryLayoutComponent_resize_HostBindingHandler($event) { return ctx.onWindowResize($event); }, false, ɵngcc0.ɵɵresolveWindow);
    } }, inputs: { ENABLE_MASONRY: ["masonry", "ENABLE_MASONRY"], MAX_HEIGHT: ["max-height", "MAX_HEIGHT"], gutter: "gutter", images: "images", CLASS_NAME: ["class-name", "CLASS_NAME"] }, outputs: { events: "events" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 1, vars: 1, consts: [[3, "ngClass", "width", "height", "float", "margin", "background", "lineHeight", 4, "ngFor", "ngForOf"], [3, "ngClass"], [3, "src", "click", "load"], ["imageElem", ""]], template: function MasonryLayoutComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, MasonryLayoutComponent_div_0_Template, 3, 20, "div", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngForOf", ctx.images);
    } }, directives: [ɵngcc1.NgForOf, ɵngcc1.NgClass], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MasonryLayoutComponent, [{
        type: Component,
        args: [{
                selector: 'masonry-layout',
                template: "<div \n\t[ngClass]=\"CLASS_NAME\"\n\t*ngFor=\"let image of images; let i = index;\"\n    [style.width]=\"image.computedWidth\"\n    [style.height]=\"image.computedHeight\"\n    [style.float]=\"'left'\"\n    [style.margin]=\"image.margin\"\n    [style.background]=\"'#eeeeee'\"\n    [style.lineHeight]=\"0\">\n\t<img \n        #imageElem\n        [src]=\"image.preview || image.full\" \n        [style.width.%]=\"100\" \n        [style.height]=\"'auto'\"\n        [style.opacity]=\"0\"\n        (click)=\"clickOnImage(image, i)\"\n        (load)=\"onImageLoaded(imageElem)\" />\n</div>"
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { ENABLE_MASONRY: [{
            type: Input,
            args: ['masonry']
        }], MAX_HEIGHT: [{
            type: Input,
            args: ['max-height']
        }], events: [{
            type: Output
        }], gutter: [{
            type: Input,
            args: ['gutter']
        }], onWindowResize: [{
            type: HostListener,
            args: ['window:resize', ['$event']]
        }], images: [{
            type: Input,
            args: ['images']
        }], CLASS_NAME: [{
            type: Input,
            args: ['class-name']
        }] }); })();
    return MasonryLayoutComponent;
}());
export { MasonryLayoutComponent };
if (false) {
    /** @type {?} */
    MasonryLayoutComponent.prototype.GUTTER;
    /** @type {?} */
    MasonryLayoutComponent.prototype.nodes;
    /** @type {?} */
    MasonryLayoutComponent.prototype.elem;
    /** @type {?} */
    MasonryLayoutComponent.prototype.savedNodeDimensions;
    /** @type {?} */
    MasonryLayoutComponent.prototype.observer;
    /** @type {?} */
    MasonryLayoutComponent.prototype.gridState;
    /** @type {?} */
    MasonryLayoutComponent.prototype.resizeTimer;
    /** @type {?} */
    MasonryLayoutComponent.prototype.changesTimer;
    /** @type {?} */
    MasonryLayoutComponent.prototype.images;
    /** @type {?} */
    MasonryLayoutComponent.prototype.ENABLE_MASONRY;
    /** @type {?} */
    MasonryLayoutComponent.prototype.MAX_HEIGHT;
    /** @type {?} */
    MasonryLayoutComponent.prototype.CLASS_NAME;
    /** @type {?} */
    MasonryLayoutComponent.prototype.events;
    /** @type {?} */
    MasonryLayoutComponent.prototype.elementRef;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,