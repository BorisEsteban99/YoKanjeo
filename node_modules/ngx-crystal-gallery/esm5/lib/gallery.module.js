/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { LightboxComponent } from './lightbox.component';
import { LightboxMobileComponent } from './lightbox-mobile.component';
import { GalleryComponent } from './gallery.component';
import { CrystalLightbox } from './dom.service';
import { MasonryLayoutComponent } from './masonry-layout.component';
import { PinchDirective } from './pinch.directive';
import * as ɵngcc0 from '@angular/core';
var CrystalGalleryModule = /** @class */ (function () {
    function CrystalGalleryModule() {
    }
CrystalGalleryModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: CrystalGalleryModule });
CrystalGalleryModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function CrystalGalleryModule_Factory(t) { return new (t || CrystalGalleryModule)(); }, providers: [
        CrystalLightbox
    ], imports: [[
            CommonModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CrystalGalleryModule, { declarations: function () { return [LightboxComponent,
        LightboxMobileComponent,
        GalleryComponent,
        MasonryLayoutComponent,
        PinchDirective]; }, imports: function () { return [CommonModule]; }, exports: function () { return [GalleryComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CrystalGalleryModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    LightboxComponent,
                    LightboxMobileComponent,
                    GalleryComponent,
                    MasonryLayoutComponent,
                    PinchDirective
                ],
                imports: [
                    CommonModule
                ],
                exports: [
                    GalleryComponent
                ],
                providers: [
                    CrystalLightbox
                ],
                bootstrap: [],
                entryComponents: [
                    LightboxComponent,
                    LightboxMobileComponent
                ]
            }]
    }], function () { return []; }, null); })();
    return CrystalGalleryModule;
}());
export { CrystalGalleryModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2FsbGVyeS5tb2R1bGUuanMiLCJzb3VyY2VzIjpbIm5neC1jcnlzdGFsLWdhbGxlcnkvbGliL2dhbGxlcnkubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUN6RCxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUN0RSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQUssZUFBZSxDQUFBO0FBQzlDLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQ3BFLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQzs7QUFDbkQ7QUFHd0I7QUFFckI7MERBSkYsUUFBUSxTQUFDO2FBQ04sWUFBWSxFQUFFLDJCQUNWLGlCQUFpQiwyQkFDakIsdUJBQXVCLDJCQUN2QjtBQUFnQjtHQUNoQjtNQUFzQjtRQUN0QjtPQUFjLHVCQUNqQix1QkFDRCxPQUFPLEVBQUUsMkJBQ0wsWUFBWSx1QkFDZix1QkFDRCxPQUFPLEVBQUU7WUFDTCxnQkFBZ0I7a0JBQ25CO2VBQ0QsU0FBUyxFQUFFO3FCQUNQLGVBQWUsdUJBQ2xCLHVCQUNELFNBQVMsRUFBRSxFQUVWLHVCQUNELGVBQWUsRUFBRTt1QkFDYixpQkFBaUIsMkJBQ2pCO1dBQXVCO1VBQzFCO1lBQ0o7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Z0RBQ1U7QUFBRSwrQkFsQ2I7QUFBRzs7O0FBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBRUEsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQ0EsQUFqQ0EsQUFrQ0EsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgTGlnaHRib3hDb21wb25lbnQgfSBmcm9tICcuL2xpZ2h0Ym94LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBMaWdodGJveE1vYmlsZUNvbXBvbmVudCB9IGZyb20gJy4vbGlnaHRib3gtbW9iaWxlLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBHYWxsZXJ5Q29tcG9uZW50IH0gZnJvbSAnLi9nYWxsZXJ5LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBDcnlzdGFsTGlnaHRib3ggfSBmcm9tJy4vZG9tLnNlcnZpY2UnIFxuaW1wb3J0IHsgTWFzb25yeUxheW91dENvbXBvbmVudCB9IGZyb20gJy4vbWFzb25yeS1sYXlvdXQuY29tcG9uZW50JzsgXG5pbXBvcnQgeyBQaW5jaERpcmVjdGl2ZSB9IGZyb20gJy4vcGluY2guZGlyZWN0aXZlJzsgXG5cbkBOZ01vZHVsZSh7XG4gICAgZGVjbGFyYXRpb25zOiBbXG4gICAgICAgIExpZ2h0Ym94Q29tcG9uZW50LFxuICAgICAgICBMaWdodGJveE1vYmlsZUNvbXBvbmVudCxcbiAgICAgICAgR2FsbGVyeUNvbXBvbmVudCxcbiAgICAgICAgTWFzb25yeUxheW91dENvbXBvbmVudCxcbiAgICAgICAgUGluY2hEaXJlY3RpdmVcbiAgICBdLFxuICAgIGltcG9ydHM6IFtcbiAgICAgICAgQ29tbW9uTW9kdWxlXG4gICAgXSxcbiAgICBleHBvcnRzOiBbXG4gICAgICAgIEdhbGxlcnlDb21wb25lbnRcbiAgICBdLFxuICAgIHByb3ZpZGVyczogW1xuICAgICAgICBDcnlzdGFsTGlnaHRib3hcbiAgICBdLFxuICAgIGJvb3RzdHJhcDogW1xuICAgICAgICBcbiAgICBdLFxuICAgIGVudHJ5Q29tcG9uZW50czogW1xuICAgICAgICBMaWdodGJveENvbXBvbmVudCxcbiAgICAgICAgTGlnaHRib3hNb2JpbGVDb21wb25lbnRcbiAgICBdXG59KVxuZXhwb3J0IGNsYXNzIENyeXN0YWxHYWxsZXJ5TW9kdWxlIHsgfVxuIl19