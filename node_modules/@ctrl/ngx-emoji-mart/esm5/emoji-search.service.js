import { __decorate, __values } from "tslib";
import { Injectable } from '@angular/core';
import { categories, EmojiData, EmojiService, } from '@ctrl/ngx-emoji-mart/ngx-emoji';
import { intersect } from './utils';
import * as i0 from "@angular/core";
import * as i1 from "@ctrl/ngx-emoji-mart/ngx-emoji";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@ctrl/ngx-emoji-mart/ngx-emoji';
var EmojiSearch = /** @class */ (function () {
    function EmojiSearch(emojiService) {
        var e_1, _a;
        var _this = this;
        this.emojiService = emojiService;
        this.originalPool = {};
        this.index = {};
        this.emojisList = {};
        this.emoticonsList = {};
        this.emojiSearch = {};
        var _loop_1 = function (emojiData) {
            var shortNames = emojiData.shortNames, emoticons = emojiData.emoticons;
            var id = shortNames[0];
            emoticons.forEach(function (emoticon) {
                if (_this.emoticonsList[emoticon]) {
                    return;
                }
                _this.emoticonsList[emoticon] = id;
            });
            this_1.emojisList[id] = this_1.emojiService.getSanitizedData(id);
            this_1.originalPool[id] = emojiData;
        };
        var this_1 = this;
        try {
            for (var _b = __values(this.emojiService.emojis), _c = _b.next(); !_c.done; _c = _b.next()) {
                var emojiData = _c.value;
                _loop_1(emojiData);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    }
    EmojiSearch.prototype.addCustomToPool = function (custom, pool) {
        var _this = this;
        custom.forEach(function (emoji) {
            var emojiId = emoji.id || emoji.shortNames[0];
            if (emojiId && !pool[emojiId]) {
                pool[emojiId] = _this.emojiService.getData(emoji);
                _this.emojisList[emojiId] = _this.emojiService.getSanitizedData(emoji);
            }
        });
    };
    EmojiSearch.prototype.search = function (value, emojisToShowFilter, maxResults, include, exclude, custom) {
        var _this = this;
        if (maxResults === void 0) { maxResults = 75; }
        if (include === void 0) { include = []; }
        if (exclude === void 0) { exclude = []; }
        if (custom === void 0) { custom = []; }
        this.addCustomToPool(custom, this.originalPool);
        var results;
        var pool = this.originalPool;
        if (value.length) {
            if (value === '-' || value === '-1') {
                return [this.emojisList['-1']];
            }
            if (value === '+' || value === '+1') {
                return [this.emojisList['+1']];
            }
            var values = value.toLowerCase().split(/[\s|,|\-|_]+/);
            var allResults = [];
            if (values.length > 2) {
                values = [values[0], values[1]];
            }
            if (include.length || exclude.length) {
                pool = {};
                categories.forEach(function (category) {
                    var isIncluded = include && include.length
                        ? include.indexOf(category.id) > -1
                        : true;
                    var isExcluded = exclude && exclude.length
                        ? exclude.indexOf(category.id) > -1
                        : false;
                    if (!isIncluded || isExcluded) {
                        return;
                    }
                    category.emojis.forEach(function (emojiId) {
                        // Need to make sure that pool gets keyed
                        // with the correct id, which is why we call emojiService.getData below
                        var emoji = _this.emojiService.getData(emojiId);
                        pool[emoji.id] = emoji;
                    });
                });
                if (custom.length) {
                    var customIsIncluded = include && include.length ? include.indexOf('custom') > -1 : true;
                    var customIsExcluded = exclude && exclude.length ? exclude.indexOf('custom') > -1 : false;
                    if (customIsIncluded && !customIsExcluded) {
                        this.addCustomToPool(custom, pool);
                    }
                }
            }
            allResults = values
                .map(function (v) {
                var aPool = pool;
                var aIndex = _this.index;
                var length = 0;
                var _loop_2 = function (charIndex) {
                    var e_2, _a;
                    var char = v[charIndex];
                    length++;
                    if (!aIndex[char]) {
                        aIndex[char] = {};
                    }
                    aIndex = aIndex[char];
                    if (!aIndex.results) {
                        var scores_1 = {};
                        aIndex.results = [];
                        aIndex.pool = {};
                        try {
                            for (var _b = (e_2 = void 0, __values(Object.keys(aPool))), _c = _b.next(); !_c.done; _c = _b.next()) {
                                var id = _c.value;
                                var emoji = aPool[id];
                                if (!_this.emojiSearch[id]) {
                                    _this.emojiSearch[id] = _this.buildSearch(emoji.short_names, emoji.name, emoji.id, emoji.keywords, emoji.emoticons);
                                }
                                var query = _this.emojiSearch[id];
                                var sub = v.substr(0, length);
                                var subIndex = query.indexOf(sub);
                                if (subIndex !== -1) {
                                    var score = subIndex + 1;
                                    if (sub === id) {
                                        score = 0;
                                    }
                                    aIndex.results.push(_this.emojisList[id]);
                                    aIndex.pool[id] = emoji;
                                    scores_1[id] = score;
                                }
                            }
                        }
                        catch (e_2_1) { e_2 = { error: e_2_1 }; }
                        finally {
                            try {
                                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                            }
                            finally { if (e_2) throw e_2.error; }
                        }
                        aIndex.results.sort(function (a, b) {
                            var aScore = scores_1[a.id];
                            var bScore = scores_1[b.id];
                            return aScore - bScore;
                        });
                    }
                    aPool = aIndex.pool;
                };
                // tslint:disable-next-line: prefer-for-of
                for (var charIndex = 0; charIndex < v.length; charIndex++) {
                    _loop_2(charIndex);
                }
                return aIndex.results;
            })
                .filter(function (a) { return a; });
            if (allResults.length > 1) {
                results = intersect.apply(null, allResults);
            }
            else if (allResults.length) {
                results = allResults[0];
            }
            else {
                results = [];
            }
        }
        if (results) {
            if (emojisToShowFilter) {
                results = results.filter(function (result) {
                    if (result && result.id) {
                        return emojisToShowFilter(_this.emojiService.names[result.id]);
                    }
                    return false;
                });
            }
            if (results && results.length > maxResults) {
                results = results.slice(0, maxResults);
            }
        }
        return results || null;
    };
    EmojiSearch.prototype.buildSearch = function (shortNames, name, id, keywords, emoticons) {
        var search = [];
        var addToSearch = function (strings, split) {
            if (!strings) {
                return;
            }
            (Array.isArray(strings) ? strings : [strings]).forEach(function (str) {
                (split ? str.split(/[-|_|\s]+/) : [str]).forEach(function (s) {
                    s = s.toLowerCase();
                    if (!search.includes(s)) {
                        search.push(s);
                    }
                });
            });
        };
        addToSearch(shortNames, true);
        addToSearch(name, true);
        addToSearch(id, true);
        addToSearch(keywords, true);
        addToSearch(emoticons, false);
        return search.join(',');
    };
    EmojiSearch.ctorParameters = function () { return [
        { type: EmojiService }
    ]; };
    EmojiSearch.ɵprov = i0.ɵɵdefineInjectable({ factory: function EmojiSearch_Factory() { return new EmojiSearch(i0.ɵɵinject(i1.EmojiService)); }, token: EmojiSearch, providedIn: "root" });
EmojiSearch.ɵfac = function EmojiSearch_Factory(t) { return new (t || EmojiSearch)(ɵngcc0.ɵɵinject(ɵngcc1.EmojiService)); };
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(EmojiSearch, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return [{ type: ɵngcc1.EmojiService }]; }, null); })();
    return EmojiSearch;
}());
export { EmojiSearch };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,