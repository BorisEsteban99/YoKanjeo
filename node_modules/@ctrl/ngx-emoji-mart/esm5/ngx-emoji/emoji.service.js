import { __assign, __decorate, __read, __spread, __values } from "tslib";
import { Injectable } from '@angular/core';
import { emojis } from './data/emojis';
import * as i0 from "@angular/core";
import * as ɵngcc0 from '@angular/core';
var COLONS_REGEX = /^(?:\:([^\:]+)\:)(?:\:skin-tone-(\d)\:)?$/;
var SKINS = ['1F3FA', '1F3FB', '1F3FC', '1F3FD', '1F3FE', '1F3FF'];
export var DEFAULT_BACKGROUNDFN = function (set, sheetSize) { return "https://unpkg.com/emoji-datasource-" + set + "@5.0.1/img/" + set + "/sheets-256/" + sheetSize + ".png"; };
var EmojiService = /** @class */ (function () {
    function EmojiService() {
        this.uncompressed = false;
        this.names = {};
        this.emojis = [];
        if (!this.uncompressed) {
            this.uncompress(emojis);
            this.uncompressed = true;
        }
    }
    EmojiService.prototype.uncompress = function (list) {
        var _this = this;
        this.emojis = list.map(function (emoji) {
            var e_1, _a;
            var data = __assign({}, emoji);
            if (!data.shortNames) {
                data.shortNames = [];
            }
            data.shortNames.unshift(data.shortName);
            data.id = data.shortName;
            data.native = _this.unifiedToNative(data.unified);
            if (!data.skinVariations) {
                data.skinVariations = [];
            }
            if (!data.keywords) {
                data.keywords = [];
            }
            if (!data.emoticons) {
                data.emoticons = [];
            }
            if (!data.hidden) {
                data.hidden = [];
            }
            if (!data.text) {
                data.text = '';
            }
            if (data.obsoletes) {
                // get keywords from emoji that it obsoletes since that is shared
                var f = list.find(function (x) { return x.unified === data.obsoletes; });
                if (f) {
                    if (f.keywords) {
                        data.keywords = __spread(data.keywords, f.keywords, [f.shortName]);
                    }
                    else {
                        data.keywords = __spread(data.keywords, [f.shortName]);
                    }
                }
            }
            _this.names[data.unified] = data;
            try {
                for (var _b = __values(data.shortNames), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var n = _c.value;
                    _this.names[n] = data;
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return data;
        });
    };
    EmojiService.prototype.getData = function (emoji, skin, set) {
        var emojiData;
        if (typeof emoji === 'string') {
            var matches = emoji.match(COLONS_REGEX);
            if (matches) {
                emoji = matches[1];
                if (matches[2]) {
                    skin = parseInt(matches[2], 10);
                }
            }
            if (this.names.hasOwnProperty(emoji)) {
                emojiData = this.names[emoji];
            }
            else {
                return null;
            }
        }
        else if (emoji.id) {
            emojiData = this.names[emoji.id];
        }
        else if (emoji.unified) {
            emojiData = this.names[emoji.unified.toUpperCase()];
        }
        if (!emojiData) {
            emojiData = emoji;
            emojiData.custom = true;
        }
        var hasSkinVariations = emojiData.skinVariations && emojiData.skinVariations.length;
        if (hasSkinVariations && skin && skin > 1 && set) {
            emojiData = __assign({}, emojiData);
            var skinKey_1 = SKINS[skin - 1];
            var variationData = emojiData.skinVariations.find(function (n) {
                return n.unified.includes(skinKey_1);
            });
            if (!variationData.hidden || !variationData.hidden.includes(set)) {
                emojiData.skinTone = skin;
                emojiData = __assign(__assign({}, emojiData), variationData);
            }
            emojiData.native = this.unifiedToNative(emojiData.unified);
        }
        emojiData.set = set || '';
        return emojiData;
    };
    EmojiService.prototype.unifiedToNative = function (unified) {
        var codePoints = unified.split('-').map(function (u) { return parseInt("0x" + u, 16); });
        return String.fromCodePoint.apply(String, __spread(codePoints));
    };
    EmojiService.prototype.emojiSpriteStyles = function (sheet, set, size, sheetSize, sheetRows, backgroundImageFn, sheetColumns) {
        if (set === void 0) { set = 'apple'; }
        if (size === void 0) { size = 24; }
        if (sheetSize === void 0) { sheetSize = 64; }
        if (sheetRows === void 0) { sheetRows = 57; }
        if (backgroundImageFn === void 0) { backgroundImageFn = DEFAULT_BACKGROUNDFN; }
        if (sheetColumns === void 0) { sheetColumns = 57; }
        return {
            width: size + "px",
            height: size + "px",
            display: 'inline-block',
            'background-image': "url(" + backgroundImageFn(set, sheetSize) + ")",
            'background-size': 100 * sheetColumns + "% " + 100 * sheetRows + "%",
            'background-position': this.getSpritePosition(sheet, sheetColumns),
        };
    };
    EmojiService.prototype.getSpritePosition = function (sheet, sheetColumns) {
        var _a = __read(sheet, 2), sheetX = _a[0], sheetY = _a[1];
        var multiply = 100 / (sheetColumns - 1);
        return multiply * sheetX + "% " + multiply * sheetY + "%";
    };
    EmojiService.prototype.sanitize = function (emoji) {
        if (emoji === null) {
            return null;
        }
        var id = emoji.id || emoji.shortNames[0];
        var colons = ":" + id + ":";
        if (emoji.skinTone) {
            colons += ":skin-tone-" + emoji.skinTone + ":";
        }
        emoji.colons = colons;
        return __assign({}, emoji);
    };
    EmojiService.prototype.getSanitizedData = function (emoji, skin, set) {
        return this.sanitize(this.getData(emoji, skin, set));
    };
    EmojiService.ɵprov = i0.ɵɵdefineInjectable({ factory: function EmojiService_Factory() { return new EmojiService(); }, token: EmojiService, providedIn: "root" });
EmojiService.ɵfac = function EmojiService_Factory(t) { return new (t || EmojiService)(); };
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(EmojiService, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return []; }, null); })();
    return EmojiService;
}());
export { EmojiService };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,