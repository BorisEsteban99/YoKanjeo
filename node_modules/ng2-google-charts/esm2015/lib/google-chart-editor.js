import { __awaiter, __decorate, __metadata } from "tslib";
import { Injectable } from '@angular/core';
import { GoogleChartsLoaderService } from './google-charts-loader.service';
import * as i0 from "@angular/core";
import * as i1 from "./google-charts-loader.service";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './google-charts-loader.service';
function isComponent(chart) {
    return chart.wrapper !== undefined;
}
let GoogleChartEditor = class GoogleChartEditor {
    constructor(loaderService) {
        this.loaderService = loaderService;
    }
    createEditor() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.chartEditor !== undefined) {
                return;
            }
            yield this.loaderService.load({ packages: ['charteditor'] });
            this.chartEditor = new google.visualization.ChartEditor();
            google.visualization.events.addListener(this.chartEditor, 'ok', () => {
                const wrapper = this.chartEditor.getChartWrapper();
                this.comp.wrapper = wrapper;
                this.comp.data.chartType = wrapper.getChartType();
                if (this.comp.data.options !== undefined || Object.isExtensible(this.comp.data)) {
                    this.comp.data.options = wrapper.getOptions();
                }
                this.comp.wrapper.draw();
            });
        });
    }
    openDialog(chart, options) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.createEditor();
            return new Promise((resolve, reject) => {
                this.comp = isComponent(chart) ? chart : chart.component;
                this.chartEditor.openDialog(this.comp.wrapper, options);
                google.visualization.events.addListener(this.chartEditor, 'ok', () => {
                    resolve(this.comp.wrapper);
                });
                google.visualization.events.addListener(this.chartEditor, 'cancel', () => {
                    reject();
                });
            });
        });
    }
};
GoogleChartEditor.ɵfac = function GoogleChartEditor_Factory(t) { return new (t || GoogleChartEditor)(ɵngcc0.ɵɵinject(ɵngcc1.GoogleChartsLoaderService)); };
GoogleChartEditor.ɵprov = i0.ɵɵdefineInjectable({ factory: function GoogleChartEditor_Factory() { return new GoogleChartEditor(i0.ɵɵinject(i1.GoogleChartsLoaderService)); }, token: GoogleChartEditor, providedIn: "root" });
GoogleChartEditor = __decorate([ __metadata("design:paramtypes", [GoogleChartsLoaderService])
], GoogleChartEditor);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(GoogleChartEditor, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.GoogleChartsLoaderService }]; }, null); })();
export { GoogleChartEditor };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ29vZ2xlLWNoYXJ0LWVkaXRvci5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmcyLWdvb2dsZS1jaGFydHMvc3JjL2xpYi9nb29nbGUtY2hhcnQtZWRpdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQzNFO0FBQXFDOzs7QUFHckMsU0FBUyxXQUFXLENBQUMsS0FBa0Q7QUFBSSxJQUN6RSxPQUFRLEtBQThCLENBQUMsT0FBTyxLQUFLLFNBQVMsQ0FBQztBQUMvRCxDQUFDO0FBV0QsSUFBYSxpQkFBaUIsR0FBOUIsTUFBYSxpQkFBaUI7QUFDOUIsSUFLRSxZQUEyQixhQUF3QztBQUNyRSxRQUQ2QixrQkFBYSxHQUFiLGFBQWEsQ0FBMkI7QUFBQyxJQUFDLENBQUM7QUFDeEUsSUFDZ0IsWUFBWTtBQUM1QjtBQUdBLFlBSEksSUFBSSxJQUFJLENBQUMsV0FBVyxLQUFLLFNBQVMsRUFBRTtBQUN4QyxnQkFBTSxPQUFPO0FBQ2IsYUFBSztBQUNMLFlBQUksTUFBTSxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxFQUFFLFFBQVEsRUFBRSxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNqRSxZQUFJLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxNQUFNLENBQUMsYUFBYSxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBQzlELFlBQUksTUFBTSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRTtBQUN6RSxnQkFBTSxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLGVBQWUsRUFBRSxDQUFDO0FBQ3pELGdCQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztBQUNsQyxnQkFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEdBQUcsT0FBTyxDQUFDLFlBQVksRUFBRSxDQUFDO0FBQ3hELGdCQUFNLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxLQUFLLFNBQVMsSUFBSSxNQUFNLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUU7QUFDdkYsb0JBQVEsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQyxVQUFVLEVBQUUsQ0FBQztBQUN0RCxpQkFBTztBQUNQLGdCQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDO0FBQy9CLFlBQUksQ0FBQyxDQUFDLENBQUM7QUFDUCxRQUFFLENBQUM7QUFFRixLQUZFO0FBQ0gsSUFDZSxVQUFVLENBQUMsS0FBa0QsRUFBRSxPQUFrQztBQUFJO0FBQ3pGLFlBQXZCLE1BQU0sSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO0FBQzlCLFlBQ0ksT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtBQUMzQyxnQkFBTSxJQUFJLENBQUMsSUFBSSxHQUFHLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDO0FBQy9ELGdCQUFNLElBQUksQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQzlELGdCQUFNLE1BQU0sQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUU7QUFDM0Usb0JBQVEsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDbkMsZ0JBQU0sQ0FBQyxDQUFDLENBQUM7QUFDVCxnQkFBTSxNQUFNLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFO0FBQy9FLG9CQUFRLE1BQU0sRUFBRSxDQUFDO0FBQ2pCLGdCQUFNLENBQUMsQ0FBQyxDQUFDO0FBQ1QsWUFBSSxDQUFDLENBQUMsQ0FBQztBQUNQLFFBQUUsQ0FBQztBQUVGLEtBRkU7QUFDSCxDQUNDOzJKQUFBO0FBQ0Q7QUF6Q2EsaUJBQWlCLG9CQUg3QixVQUFVLENBQUMsVUFDVixVQUFVLEVBQUUsTUFBTSxNQUNuQixDQUFDLG5EQUNFLGtDQU13Qyx5QkFBeUI7QUFBRyxHQU4zRCxpQkFBaUIsQ0F3QzdCOzs7Ozs7MEZBQ0Q7QUFBQyxTQXpDWSxpQkFBaUI7QUFFOUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IEdvb2dsZUNoYXJ0c0xvYWRlclNlcnZpY2UgfSBmcm9tICcuL2dvb2dsZS1jaGFydHMtbG9hZGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgR29vZ2xlQ2hhcnRDb21wb25lbnQsIEdvb2dsZUNoYXJ0SW50ZXJmYWNlIH0gZnJvbSAnLi9nb29nbGUtY2hhcnQvZ29vZ2xlLWNoYXJ0LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBHb29nbGVDaGFydFdyYXBwZXIgfSBmcm9tICcuL2dvb2dsZS1jaGFydHMtaW50ZXJmYWNlcyc7XG5cbmZ1bmN0aW9uIGlzQ29tcG9uZW50KGNoYXJ0OiBHb29nbGVDaGFydENvbXBvbmVudCB8IEdvb2dsZUNoYXJ0SW50ZXJmYWNlKTogY2hhcnQgaXMgR29vZ2xlQ2hhcnRDb21wb25lbnQge1xuICByZXR1cm4gKGNoYXJ0IGFzIEdvb2dsZUNoYXJ0Q29tcG9uZW50KS53cmFwcGVyICE9PSB1bmRlZmluZWQ7XG59XG5cbmRlY2xhcmUgdmFyIGdvb2dsZTogYW55O1xuXG5leHBvcnQgaW50ZXJmYWNlIEdvb2dsZUNoYXJ0RWRpdG9yT3B0aW9ucyB7XG4gIGRhdGFTb3VyY2VJbnB1dD86IGFueTtcbn1cblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgR29vZ2xlQ2hhcnRFZGl0b3Ige1xuXG4gIGNoYXJ0RWRpdG9yOiBhbnk7XG5cbiAgcHJpdmF0ZSBjb21wOiBHb29nbGVDaGFydENvbXBvbmVudDtcblxuICBwdWJsaWMgY29uc3RydWN0b3IocHJpdmF0ZSBsb2FkZXJTZXJ2aWNlOiBHb29nbGVDaGFydHNMb2FkZXJTZXJ2aWNlKXt9XG5cbiAgcHJpdmF0ZSBhc3luYyBjcmVhdGVFZGl0b3IoKSB7XG4gICAgaWYgKHRoaXMuY2hhcnRFZGl0b3IgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBhd2FpdCB0aGlzLmxvYWRlclNlcnZpY2UubG9hZCh7IHBhY2thZ2VzOiBbJ2NoYXJ0ZWRpdG9yJ10gfSk7XG4gICAgdGhpcy5jaGFydEVkaXRvciA9IG5ldyBnb29nbGUudmlzdWFsaXphdGlvbi5DaGFydEVkaXRvcigpO1xuICAgIGdvb2dsZS52aXN1YWxpemF0aW9uLmV2ZW50cy5hZGRMaXN0ZW5lcih0aGlzLmNoYXJ0RWRpdG9yLCAnb2snLCAoKSA9PiB7XG4gICAgICBjb25zdCB3cmFwcGVyID0gdGhpcy5jaGFydEVkaXRvci5nZXRDaGFydFdyYXBwZXIoKTtcbiAgICAgIHRoaXMuY29tcC53cmFwcGVyID0gd3JhcHBlcjtcbiAgICAgIHRoaXMuY29tcC5kYXRhLmNoYXJ0VHlwZSA9IHdyYXBwZXIuZ2V0Q2hhcnRUeXBlKCk7XG4gICAgICBpZiAodGhpcy5jb21wLmRhdGEub3B0aW9ucyAhPT0gdW5kZWZpbmVkIHx8IE9iamVjdC5pc0V4dGVuc2libGUodGhpcy5jb21wLmRhdGEpKSB7XG4gICAgICAgIHRoaXMuY29tcC5kYXRhLm9wdGlvbnMgPSB3cmFwcGVyLmdldE9wdGlvbnMoKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuY29tcC53cmFwcGVyLmRyYXcoKTtcbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBvcGVuRGlhbG9nKGNoYXJ0OiBHb29nbGVDaGFydENvbXBvbmVudCB8IEdvb2dsZUNoYXJ0SW50ZXJmYWNlLCBvcHRpb25zPzogR29vZ2xlQ2hhcnRFZGl0b3JPcHRpb25zKTogUHJvbWlzZTxHb29nbGVDaGFydFdyYXBwZXIgfCBhbnk+IHtcbiAgICBhd2FpdCB0aGlzLmNyZWF0ZUVkaXRvcigpO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRoaXMuY29tcCA9IGlzQ29tcG9uZW50KGNoYXJ0KSA/IGNoYXJ0IDogY2hhcnQuY29tcG9uZW50O1xuICAgICAgdGhpcy5jaGFydEVkaXRvci5vcGVuRGlhbG9nKHRoaXMuY29tcC53cmFwcGVyLCBvcHRpb25zKTtcbiAgICAgIGdvb2dsZS52aXN1YWxpemF0aW9uLmV2ZW50cy5hZGRMaXN0ZW5lcih0aGlzLmNoYXJ0RWRpdG9yLCAnb2snLCAoKSA9PiB7XG4gICAgICAgIHJlc29sdmUodGhpcy5jb21wLndyYXBwZXIpO1xuICAgICAgfSk7XG4gICAgICBnb29nbGUudmlzdWFsaXphdGlvbi5ldmVudHMuYWRkTGlzdGVuZXIodGhpcy5jaGFydEVkaXRvciwgJ2NhbmNlbCcsICgpID0+IHtcbiAgICAgICAgcmVqZWN0KCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG59XG4iXX0=