import { __awaiter, __decorate, __metadata, __param } from "tslib";
import { Injectable, EventEmitter, LOCALE_ID, Inject, Optional } from '@angular/core';
import * as i0 from "@angular/core";
import * as ɵngcc0 from '@angular/core';
let GoogleChartsLoaderService = class GoogleChartsLoaderService {
    constructor(localeId, googleChartsSettings) {
        this.googleChartsSettings = googleChartsSettings;
        this.googleScriptLoadingNotifier = new EventEmitter();
        this.googleScriptIsLoading = false;
        this.localeId = localeId;
        this.loadGoogleChartsScriptPromise = new Promise((resolve, reject) => {
            if (typeof google !== 'undefined' && google.charts) {
                resolve();
            }
            else if (!this.googleScriptIsLoading) {
                this.googleScriptIsLoading = true;
                const script = document.createElement('script');
                script.type = 'text/javascript';
                script.src = 'https://www.gstatic.com/charts/loader.js';
                script.async = true;
                script.defer = true;
                script.onload = () => {
                    this.googleScriptIsLoading = false;
                    this.googleScriptLoadingNotifier.emit(true);
                    resolve();
                };
                script.onerror = () => {
                    this.googleScriptIsLoading = false;
                    this.googleScriptLoadingNotifier.emit(false);
                    reject();
                };
                document.getElementsByTagName('head')[0].appendChild(script);
            }
            else {
                this.googleScriptLoadingNotifier.subscribe((loaded) => {
                    if (loaded) {
                        resolve();
                    }
                    else {
                        reject();
                    }
                });
            }
        });
    }
    load(settings) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.loadGoogleChartsScriptPromise;
            yield new Promise((resolve) => {
                if (!settings) {
                    settings = Object.create(this.googleChartsSettings);
                }
                if (!settings) {
                    settings = {};
                }
                if (!settings.language) {
                    settings.language = this.localeId;
                }
                if (!settings.googleChartsVersion) {
                    settings.googleChartsVersion = '47';
                }
                const _settings = settings;
                _settings.callback = resolve;
                google.charts.load(settings.googleChartsVersion, _settings);
            });
        });
    }
};
GoogleChartsLoaderService.ɵfac = function GoogleChartsLoaderService_Factory(t) { return new (t || GoogleChartsLoaderService)(ɵngcc0.ɵɵinject(LOCALE_ID), ɵngcc0.ɵɵinject('googleChartsSettings', 8)); };
GoogleChartsLoaderService.ɵprov = i0.ɵɵdefineInjectable({ factory: function GoogleChartsLoaderService_Factory() { return new GoogleChartsLoaderService(i0.ɵɵinject(i0.LOCALE_ID), i0.ɵɵinject("googleChartsSettings", 8)); }, token: GoogleChartsLoaderService, providedIn: "root" });
GoogleChartsLoaderService = __decorate([ __param(0, Inject(LOCALE_ID)),
    __param(1, Inject('googleChartsSettings')), __param(1, Optional()),
    __metadata("design:paramtypes", [String, Object])
], GoogleChartsLoaderService);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(GoogleChartsLoaderService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: String, decorators: [{
                type: Inject,
                args: [LOCALE_ID]
            }] }, { type: Object, decorators: [{
                type: Inject,
                args: ['googleChartsSettings']
            }, {
                type: Optional
            }] }]; }, null); })();
export { GoogleChartsLoaderService };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ29vZ2xlLWNoYXJ0cy1sb2FkZXIuc2VydmljZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmcyLWdvb2dsZS1jaGFydHMvc3JjL2xpYi9nb29nbGUtY2hhcnRzLWxvYWRlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFFQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN0Rjs7QUFTQSxJQUFhLHlCQUF5QixHQUF0QyxNQUFhLHlCQUF5QjtBQUN0QyxJQU1FLFlBQ3FCLFFBQWdCLEVBQ2lCLG9CQUEyQztBQUNqRyxRQURzRCx5QkFBb0IsR0FBcEIsb0JBQW9CLENBQXVCO0FBQUMsUUFFaEcsSUFBSSxDQUFDLDJCQUEyQixHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7QUFDMUQsUUFBSSxJQUFJLENBQUMscUJBQXFCLEdBQUcsS0FBSyxDQUFDO0FBQ3ZDLFFBQUksSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7QUFDN0IsUUFDSSxJQUFJLENBQUMsNkJBQTZCLEdBQUcsSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7QUFDekUsWUFBTSxJQUFJLE9BQU8sTUFBTSxLQUFLLFdBQVcsSUFBSSxNQUFNLENBQUMsTUFBTSxFQUFFO0FBQzFELGdCQUFRLE9BQU8sRUFBRSxDQUFDO0FBQ2xCLGFBQU87QUFBQyxpQkFBSyxJQUFJLENBQUMsSUFBSSxDQUFDLHFCQUFxQixFQUFFO0FBQzlDLGdCQUNRLElBQUksQ0FBQyxxQkFBcUIsR0FBRyxJQUFJLENBQUM7QUFDMUMsZ0JBQ1EsTUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUN4RCxnQkFBUSxNQUFNLENBQUMsSUFBSSxHQUFHLGlCQUFpQixDQUFDO0FBQ3hDLGdCQUFRLE1BQU0sQ0FBQyxHQUFH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Ozs7Ozs7Ozs7OztrQ0FDRDtBQUFDLFNBN0VZLHlCQUF5QjtBQUV0QyIsInNvdXJjZXNDb250ZW50IjpbImRlY2xhcmUgdmFyIGdvb2dsZTogYW55O1xuXG5pbXBvcnQgeyBJbmplY3RhYmxlLCBFdmVudEVtaXR0ZXIsIExPQ0FMRV9JRCwgSW5qZWN0LCBPcHRpb25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgR29vZ2xlQ2hhcnRzU2V0dGluZ3MgfSBmcm9tICcuL2dvb2dsZS1jaGFydHMtaW50ZXJmYWNlcyc7XG5cbmludGVyZmFjZSBJbnRlcm5hbEdvb2dsZUNoYXJ0c1NldHRpbmdzIGV4dGVuZHMgR29vZ2xlQ2hhcnRzU2V0dGluZ3Mge1xuICBjYWxsYmFjaz8oKTogYW55O1xufVxuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBHb29nbGVDaGFydHNMb2FkZXJTZXJ2aWNlIHtcblxuICBwcml2YXRlIGdvb2dsZVNjcmlwdExvYWRpbmdOb3RpZmllcjogRXZlbnRFbWl0dGVyPGJvb2xlYW4+O1xuICBwcml2YXRlIGdvb2dsZVNjcmlwdElzTG9hZGluZzogYm9vbGVhbjtcbiAgcHJpdmF0ZSBsb2NhbGVJZDogc3RyaW5nO1xuICBwcml2YXRlIGxvYWRHb29nbGVDaGFydHNTY3JpcHRQcm9taXNlOiBQcm9taXNlPHZvaWQ+O1xuXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihcbiAgICBASW5qZWN0KExPQ0FMRV9JRCkgbG9jYWxlSWQ6IHN0cmluZyxcbiAgICBASW5qZWN0KCdnb29nbGVDaGFydHNTZXR0aW5ncycpIEBPcHRpb25hbCgpIHByaXZhdGUgZ29vZ2xlQ2hhcnRzU2V0dGluZ3M/OiBHb29nbGVDaGFydHNTZXR0aW5ncyxcbiAgKSB7XG4gICAgdGhpcy5nb29nbGVTY3JpcHRMb2FkaW5nTm90aWZpZXIgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gICAgdGhpcy5nb29nbGVTY3JpcHRJc0xvYWRpbmcgPSBmYWxzZTtcbiAgICB0aGlzLmxvY2FsZUlkID0gbG9jYWxlSWQ7XG5cbiAgICB0aGlzLmxvYWRHb29nbGVDaGFydHNTY3JpcHRQcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgaWYgKHR5cGVvZiBnb29nbGUgIT09ICd1bmRlZmluZWQnICYmIGdvb2dsZS5jaGFydHMpIHtcbiAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgfSBlbHNlIGlmICghdGhpcy5nb29nbGVTY3JpcHRJc0xvYWRpbmcpIHtcblxuICAgICAgICB0aGlzLmdvb2dsZVNjcmlwdElzTG9hZGluZyA9IHRydWU7XG5cbiAgICAgICAgY29uc3Qgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG4gICAgICAgIHNjcmlwdC50eXBlID0gJ3RleHQvamF2YXNjcmlwdCc7XG4gICAgICAgIHNjcmlwdC5zcmMgPSAnaHR0cHM6Ly93d3cuZ3N0YXRpYy5jb20vY2hhcnRzL2xvYWRlci5qcyc7XG4gICAgICAgIHNjcmlwdC5hc3luYyA9IHRydWU7XG4gICAgICAgIHNjcmlwdC5kZWZlciA9IHRydWU7XG4gICAgICAgIHNjcmlwdC5vbmxvYWQgPSAoKSA9PiB7XG4gICAgICAgICAgdGhpcy5nb29nbGVTY3JpcHRJc0xvYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgICB0aGlzLmdvb2dsZVNjcmlwdExvYWRpbmdOb3RpZmllci5lbWl0KHRydWUpO1xuICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgfTtcbiAgICAgICAgc2NyaXB0Lm9uZXJyb3IgPSAoKSA9PiB7XG4gICAgICAgICAgdGhpcy5nb29nbGVTY3JpcHRJc0xvYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgICB0aGlzLmdvb2dsZVNjcmlwdExvYWRpbmdOb3RpZmllci5lbWl0KGZhbHNlKTtcbiAgICAgICAgICByZWplY3QoKTtcbiAgICAgICAgfTtcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXS5hcHBlbmRDaGlsZChzY3JpcHQpO1xuXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmdvb2dsZVNjcmlwdExvYWRpbmdOb3RpZmllci5zdWJzY3JpYmUoKGxvYWRlZDogYm9vbGVhbikgPT4ge1xuICAgICAgICAgIGlmIChsb2FkZWQpIHtcbiAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVqZWN0KCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBsb2FkKHNldHRpbmdzPzogR29vZ2xlQ2hhcnRzU2V0dGluZ3MpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBhd2FpdCB0aGlzLmxvYWRHb29nbGVDaGFydHNTY3JpcHRQcm9taXNlO1xuXG4gICAgYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgIGlmICghc2V0dGluZ3MpIHtcbiAgICAgICAgc2V0dGluZ3MgPSBPYmplY3QuY3JlYXRlKHRoaXMuZ29vZ2xlQ2hhcnRzU2V0dGluZ3MpO1xuICAgICAgfVxuICAgICAgaWYgKCFzZXR0aW5ncykge1xuICAgICAgICBzZXR0aW5ncyA9IHt9O1xuICAgICAgfVxuXG4gICAgICBpZiAoIXNldHRpbmdzLmxhbmd1YWdlKSB7XG4gICAgICAgIHNldHRpbmdzLmxhbmd1YWdlID0gdGhpcy5sb2NhbGVJZDtcbiAgICAgIH1cblxuICAgICAgaWYgKCFzZXR0aW5ncy5nb29nbGVDaGFydHNWZXJzaW9uKSB7XG4gICAgICAgIHNldHRpbmdzLmdvb2dsZUNoYXJ0c1ZlcnNpb24gPSAnNDcnO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBfc2V0dGluZ3M6IEludGVybmFsR29vZ2xlQ2hhcnRzU2V0dGluZ3MgPSBzZXR0aW5ncztcbiAgICAgIF9zZXR0aW5ncy5jYWxsYmFjayA9IHJlc29sdmU7XG5cbiAgICAgIGdvb2dsZS5jaGFydHMubG9hZChzZXR0aW5ncy5nb29nbGVDaGFydHNWZXJzaW9uLCBfc2V0dGluZ3MpO1xuICAgIH0pO1xuICB9XG59XG4iXX0=