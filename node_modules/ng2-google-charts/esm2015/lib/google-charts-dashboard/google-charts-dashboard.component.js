import { __awaiter, __decorate, __metadata } from "tslib";
import { Component, ElementRef, Input, } from '@angular/core';
import { GoogleChartsLoaderService } from '../google-charts-loader.service';
import { GoogleChartsDataTable } from '../google-charts-datatable';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../google-charts-loader.service';
let GoogleChartsDashboardComponent = class GoogleChartsDashboardComponent {
    constructor(el, loaderService) {
        this.el = el;
        this.loaderService = loaderService;
        this.el = el;
        this.loaderService = loaderService;
    }
    ngOnInit() {
        this.data.component = this;
        this.init().then(() => {
            if (!this.dataTable) {
                this.dataTable = new GoogleChartsDataTable(this.data);
                this.dataTable.dataTableChanged.subscribe((dt) => {
                    this._draw();
                });
            }
            this.draw();
        });
    }
    init() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.loaderService.load({ packages: ['controls'] });
            this.dashboard = new google.visualization.Dashboard(this.el.nativeElement.querySelector('div'));
            for (const b of this.data.bind) {
                let controls = b[0];
                let charts = b[1];
                if (!(controls instanceof Array)) {
                    controls = [controls];
                }
                if (!(charts instanceof Array)) {
                    charts = [charts];
                }
                for (const c of controls) {
                    yield c.component.ensureInit();
                }
                for (const c of charts) {
                    yield c.component.init();
                    const data = c.component.data;
                    if (data.dataTable !== undefined || data.dataSourceUrl !== undefined) {
                        throw Error('dataTable and dataSourceUrl cannot be specified when ' +
                            'chart is drawn in a Dashboard');
                    }
                }
                this.dashboard.bind(controls.map(x => x.component.wrapper), charts.map(x => x.component.wrapper));
            }
        });
    }
    draw(value) {
        this.dataTable.init(value);
    }
    _draw() {
        this.dashboard.draw(this.dataTable.getDataTable());
    }
};
GoogleChartsDashboardComponent.ɵfac = function GoogleChartsDashboardComponent_Factory(t) { return new (t || GoogleChartsDashboardComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.GoogleChartsLoaderService)); };
GoogleChartsDashboardComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: GoogleChartsDashboardComponent, selectors: [["google-charts-dashboard"]], inputs: { data: "data" }, decls: 1, vars: 0, template: function GoogleChartsDashboardComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelement(0, "div");
    } }, encapsulation: 2 });
__decorate([
    Input(),
    __metadata("design:type", Object)
], GoogleChartsDashboardComponent.prototype, "data", void 0);
GoogleChartsDashboardComponent = __decorate([ __metadata("design:paramtypes", [ElementRef,
        GoogleChartsLoaderService])
], GoogleChartsDashboardComponent);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(GoogleChartsDashboardComponent, [{
        type: Component,
        args: [{
                selector: 'google-charts-dashboard',
                template: '<div></div>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.GoogleChartsLoaderService }]; }, { data: [{
            type: Input
        }] }); })();
export { GoogleChartsDashboardComponent };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ29vZ2xlLWNoYXJ0cy1kYXNoYm9hcmQuY29tcG9uZW50LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZzItZ29vZ2xlLWNoYXJ0cy9zcmMvbGliL2dvb2dsZS1jaGFydHMtZGFzaGJvYXJkL2dvb2dsZS1jaGFydHMtZGFzaGJvYXJkLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBRUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxVQUFVLEVBRVYsS0FBSyxHQUNOLE1BQU0sZUFBZSxDQUFDO0FBRXZCLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBSTVFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDRCQUE0QixDQUFDOzs7QUFlbkUsSUFBYSw4QkFBOEIsR0FBM0MsTUFBYSw4QkFBOEI7QUFBRyxJQU81QyxZQUEyQixFQUFjLEVBQ2QsYUFBd0M7QUFDckUsUUFGNkIsT0FBRSxHQUFGLEVBQUUsQ0FBWTtBQUFDLFFBQ2Ysa0JBQWEsR0FBYixhQUFhLENBQTJCO0FBQUMsUUFDbEUsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUM7QUFDakIsUUFBSSxJQUFJLENBQUMsYUFBYSxHQUFHLGFBQWEsQ0FBQztBQUN2QyxJQUFFLENBQUM7QUFDSCxJQUNFLFFBQVE7QUFDVixRQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztBQUMvQixRQUNJLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFO0FBQzFCLFlBQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUU7QUFDM0IsZ0JBQVEsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLHFCQUFxQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUM5RCxnQkFBUSxJQUFJLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQU8sRUFBRSxFQUFF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Q3hCLENBQUMsbEJBU3NFLEdBUjNELDhCQUE4QixDQXNFMUM7Ozs7Ozs7OztvQkFDRDtBQUFDLFNBdkVZLDhCQUE4QjtBQUFJIiwic291cmNlc0NvbnRlbnQiOlsiZGVjbGFyZSB2YXIgZ29vZ2xlOiBhbnk7XG5cbmltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgRWxlbWVudFJlZixcbiAgT25Jbml0LFxuICBJbnB1dCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IEdvb2dsZUNoYXJ0c0xvYWRlclNlcnZpY2UgfSBmcm9tICcuLi9nb29nbGUtY2hhcnRzLWxvYWRlci5zZXJ2aWNlJztcbmltcG9ydCB7IEdvb2dsZUNoYXJ0c0RhdGFUYWJsZUludGVyZmFjZSB9IGZyb20gJy4uL2dvb2dsZS1jaGFydHMtZGF0YXRhYmxlJztcbmltcG9ydCB7IEdvb2dsZUNoYXJ0c0NvbnRyb2xJbnRlcmZhY2UgfSBmcm9tICcuLi9nb29nbGUtY2hhcnRzLWNvbnRyb2wvZ29vZ2xlLWNoYXJ0cy1jb250cm9sLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBHb29nbGVDaGFydEludGVyZmFjZSB9IGZyb20gJy4uL2dvb2dsZS1jaGFydC9nb29nbGUtY2hhcnQuY29tcG9uZW50JztcbmltcG9ydCB7IEdvb2dsZUNoYXJ0c0RhdGFUYWJsZSB9IGZyb20gJy4uL2dvb2dsZS1jaGFydHMtZGF0YXRhYmxlJztcblxuZXhwb3J0IGludGVyZmFjZSBHb29nbGVDaGFydHNEYXNoYm9hcmRJbnRlcmZhY2UgZXh0ZW5kc1xuIEdvb2dsZUNoYXJ0c0RhdGFUYWJsZUludGVyZmFjZSB7XG4gIGJpbmQ6IFtcbiAgICBHb29nbGVDaGFydHNDb250cm9sSW50ZXJmYWNlIHwgR29vZ2xlQ2hhcnRzQ29udHJvbEludGVyZmFjZVtdLFxuICAgIEdvb2dsZUNoYXJ0SW50ZXJmYWNlIHwgR29vZ2xlQ2hhcnRJbnRlcmZhY2VbXVxuICBdW107XG4gIGNvbXBvbmVudD86IEdvb2dsZUNoYXJ0c0Rhc2hib2FyZENvbXBvbmVudDtcbn1cblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZ29vZ2xlLWNoYXJ0cy1kYXNoYm9hcmQnLFxuICB0ZW1wbGF0ZTogJzxkaXY+PC9kaXY+Jyxcbn0pXG5leHBvcnQgY2xhc3MgR29vZ2xlQ2hhcnRzRGFzaGJvYXJkQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcblxuICBASW5wdXQoKSBwdWJsaWMgZGF0YTogR29vZ2xlQ2hhcnRzRGFzaGJvYXJkSW50ZXJmYWNlO1xuXG4gIHB1YmxpYyBkYXNoYm9hcmQ6IGFueTtcbiAgcHVibGljIGRhdGFUYWJsZTogR29vZ2xlQ2hhcnRzRGF0YVRhYmxlO1xuXG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsOiBFbGVtZW50UmVmLFxuICAgICAgICAgICAgICAgICAgICAgcHJpdmF0ZSBsb2FkZXJTZXJ2aWNlOiBHb29nbGVDaGFydHNMb2FkZXJTZXJ2aWNlKSB7XG4gICAgdGhpcy5lbCA9IGVsO1xuICAgIHRoaXMubG9hZGVyU2VydmljZSA9IGxvYWRlclNlcnZpY2U7XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLmRhdGEuY29tcG9uZW50ID0gdGhpcztcblxuICAgIHRoaXMuaW5pdCgpLnRoZW4oKCkgPT4ge1xuICAgICAgaWYgKCF0aGlzLmRhdGFUYWJsZSkge1xuICAgICAgICB0aGlzLmRhdGFUYWJsZSA9IG5ldyBHb29nbGVDaGFydHNEYXRhVGFibGUodGhpcy5kYXRhKTtcbiAgICAgICAgdGhpcy5kYXRhVGFibGUuZGF0YVRhYmxlQ2hhbmdlZC5zdWJzY3JpYmUoKGR0OiBhbnkpID0+IHtcbiAgICAgICAgICB0aGlzLl9kcmF3KCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgdGhpcy5kcmF3KCk7XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgaW5pdCgpIHtcbiAgICBhd2FpdCB0aGlzLmxvYWRlclNlcnZpY2UubG9hZCh7cGFja2FnZXM6IFsnY29udHJvbHMnXSB9KTtcblxuICAgIHRoaXMuZGFzaGJvYXJkID0gbmV3IGdvb2dsZS52aXN1YWxpemF0aW9uLkRhc2hib2FyZChcbiAgICAgIHRoaXMuZWwubmF0aXZlRWxlbWVudC5xdWVyeVNlbGVjdG9yKCdkaXYnKSk7XG5cbiAgICBmb3IgKGNvbnN0IGIgb2YgdGhpcy5kYXRhLmJpbmQpIHtcbiAgICAgIGxldCBjb250cm9scyA9IGJbMF07XG4gICAgICBsZXQgY2hhcnRzID0gYlsxXTtcblxuICAgICAgaWYgKCEoY29udHJvbHMgaW5zdGFuY2VvZiBBcnJheSkpIHtcbiAgICAgICAgY29udHJvbHMgPSBbY29udHJvbHNdO1xuICAgICAgfVxuXG4gICAgICBpZiAoIShjaGFydHMgaW5zdGFuY2VvZiBBcnJheSkpIHtcbiAgICAgICAgY2hhcnRzID0gW2NoYXJ0c107XG4gICAgICB9XG5cbiAgICAgIGZvciAoY29uc3QgYyBvZiBjb250cm9scykge1xuICAgICAgICBhd2FpdCBjLmNvbXBvbmVudC5lbnN1cmVJbml0KCk7XG4gICAgICB9XG5cbiAgICAgIGZvciAoY29uc3QgYyBvZiBjaGFydHMpIHtcbiAgICAgICAgYXdhaXQgYy5jb21wb25lbnQuaW5pdCgpO1xuICAgICAgICBjb25zdCBkYXRhID0gYy5jb21wb25lbnQuZGF0YTtcbiAgICAgICAgaWYgKGRhdGEuZGF0YVRhYmxlICE9PSB1bmRlZmluZWQgfHwgZGF0YS5kYXRhU291cmNlVXJsICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0aHJvdyBFcnJvcignZGF0YVRhYmxlIGFuZCBkYXRhU291cmNlVXJsIGNhbm5vdCBiZSBzcGVjaWZpZWQgd2hlbiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAnY2hhcnQgaXMgZHJhd24gaW4gYSBEYXNoYm9hcmQnKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLmRhc2hib2FyZC5iaW5kKGNvbnRyb2xzLm1hcCh4ID0+IHguY29tcG9uZW50LndyYXBwZXIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFydHMubWFwKHggPT4geC5jb21wb25lbnQud3JhcHBlcikpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBkcmF3KHZhbHVlPzogR29vZ2xlQ2hhcnRJbnRlcmZhY2UpIHtcbiAgICB0aGlzLmRhdGFUYWJsZS5pbml0KHZhbHVlKTtcbiAgfVxuXG4gIHByaXZhdGUgX2RyYXcoKSB7XG4gICAgdGhpcy5kYXNoYm9hcmQuZHJhdyh0aGlzLmRhdGFUYWJsZS5nZXREYXRhVGFibGUoKSk7XG4gIH1cbn1cbiJdfQ==