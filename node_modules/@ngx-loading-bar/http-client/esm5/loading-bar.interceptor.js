import { __decorate, __metadata } from "tslib";
import { LoadingBarService } from '@ngx-loading-bar/core';
import { Injectable } from '@angular/core';
import { finalize, tap } from 'rxjs/operators';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@ngx-loading-bar/core';
var LoadingBarInterceptor = /** @class */ (function () {
    function LoadingBarInterceptor(loader) {
        this.loader = loader;
    }
    LoadingBarInterceptor.prototype.intercept = function (req, next) {
        // https://github.com/angular/angular/issues/18155
        if (req.headers.has('ignoreLoadingBar')) {
            return next.handle(req.clone({ headers: req.headers.delete('ignoreLoadingBar') }));
        }
        var started = false;
        var ref = this.loader.useRef('http');
        return next.handle(req).pipe(tap(function () {
            if (!started) {
                ref.start();
                started = true;
            }
        }), finalize(function () { return started && ref.complete(); }));
    };
    LoadingBarInterceptor.ctorParameters = function () { return [
        { type: LoadingBarService }
    ]; };
    LoadingBarInterceptor = __decorate([ __metadata("design:paramtypes", [LoadingBarService])
    ], LoadingBarInterceptor);
LoadingBarInterceptor.ɵfac = function LoadingBarInterceptor_Factory(t) { return new (t || LoadingBarInterceptor)(ɵngcc0.ɵɵinject(ɵngcc1.LoadingBarService)); };
LoadingBarInterceptor.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: LoadingBarInterceptor, factory: function (t) { return LoadingBarInterceptor.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LoadingBarInterceptor, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.LoadingBarService }]; }, null); })();
    return LoadingBarInterceptor;
}());
export { LoadingBarInterceptor };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9hZGluZy1iYXIuaW50ZXJjZXB0b3IuanMiLCJzb3VyY2VzIjpbIkBuZ3gtbG9hZGluZy1iYXIvaHR0cC1jbGllbnQvbG9hZGluZy1iYXIuaW50ZXJjZXB0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzFELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHM0MsT0FBTyxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7O0FBRy9DO0FBQXlELElBQ3ZELCtCQUFvQixNQUF5QjtBQUFJLFFBQTdCLFdBQU0sR0FBTixNQUFNLENBQW1CO0FBQUMsSUFBRSxDQUFDO0FBQ25ELElBQ0UseUNBQVMsR0FBVCxVQUFVLEdBQXFCLEVBQUUsSUFBaUI7QUFBSSxRQUNwRCxrREFBa0Q7QUFDdEQsUUFBSSxJQUFJLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDLEVBQUU7QUFDN0MsWUFBTSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLE9BQU8sRUFBRSxHQUFHLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ3pGLFNBQUs7QUFDTCxRQUNJLElBQUksT0FBTyxHQUFHLEtBQUssQ0FBQztBQUN4QixRQUFJLElBQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzNDLFFBQUksT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FDMUIsR0FBRyxDQUFDO0FBQ0osWUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFO0FBQ3RCLGdCQUFVLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztBQUN0QixnQkFBVSxPQUFPLEdBQUcsSUFBSSxDQUFDO0FBQ3pCLGFBQVM7QUFDVCxRQUFNLENBQUMsQ0FBQyxFQUNGLFFBQVEsQ0FBQyxjQUFNLE9BQUEsT0FBTyxJQUFJLEdBQUcsQ0FBQyxRQUFRLEVBQUUsRUFBekIsQ0FBeUIsQ0FBQyxDQUMxQyxDQUFDO0FBQ04sSUFBRSxDQUFDO0FBQ0Y7QUFDZ0UsZ0JBckJuQyxpQkFBaUI7QUFBRztBQUUzQyxJQUhNLHFCQUFxQix3QkFEakMsVUFBVSxFQUFFLHJCQUNMLGtDQUNzQixpQkFBaUI7QUFBRyxPQURyQyxxQkFBcUIsQ0FxQmpDOzs7OztrRkFDRDtBQUFDLElBREQsNEJBQUM7QUFDQSxDQURBLEFBckJELElBcUJDO0FBQ0QsU0F0QmEscUJBQXFCO0FBQUkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBMb2FkaW5nQmFyU2VydmljZSB9IGZyb20gJ0BuZ3gtbG9hZGluZy1iYXIvY29yZSc7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBIdHRwRXZlbnQsIEh0dHBJbnRlcmNlcHRvciwgSHR0cEhhbmRsZXIsIEh0dHBSZXF1ZXN0IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZmluYWxpemUsIHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIExvYWRpbmdCYXJJbnRlcmNlcHRvciBpbXBsZW1lbnRzIEh0dHBJbnRlcmNlcHRvciB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgbG9hZGVyOiBMb2FkaW5nQmFyU2VydmljZSkge31cblxuICBpbnRlcmNlcHQocmVxOiBIdHRwUmVxdWVzdDxhbnk+LCBuZXh0OiBIdHRwSGFuZGxlcik6IE9ic2VydmFibGU8SHR0cEV2ZW50PGFueT4+IHtcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyL2lzc3Vlcy8xODE1NVxuICAgIGlmIChyZXEuaGVhZGVycy5oYXMoJ2lnbm9yZUxvYWRpbmdCYXInKSkge1xuICAgICAgcmV0dXJuIG5leHQuaGFuZGxlKHJlcS5jbG9uZSh7IGhlYWRlcnM6IHJlcS5oZWFkZXJzLmRlbGV0ZSgnaWdub3JlTG9hZGluZ0JhcicpIH0pKTtcbiAgICB9XG5cbiAgICBsZXQgc3RhcnRlZCA9IGZhbHNlO1xuICAgIGNvbnN0IHJlZiA9IHRoaXMubG9hZGVyLnVzZVJlZignaHR0cCcpO1xuICAgIHJldHVybiBuZXh0LmhhbmRsZShyZXEpLnBpcGUoXG4gICAgICB0YXAoKCkgPT4ge1xuICAgICAgICBpZiAoIXN0YXJ0ZWQpIHtcbiAgICAgICAgICByZWYuc3RhcnQoKTtcbiAgICAgICAgICBzdGFydGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSksXG4gICAgICBmaW5hbGl6ZSgoKSA9PiBzdGFydGVkICYmIHJlZi5jb21wbGV0ZSgpKSxcbiAgICApO1xuICB9XG59XG4iXX0=