import { __decorate } from "tslib";
import { LoadingBarModule } from '@ngx-loading-bar/core';
import { NgModule } from '@angular/core';
import { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';
import { LoadingBarInterceptor } from './loading-bar.interceptor';
import * as ɵngcc0 from '@angular/core';
var LoadingBarHttpClientModule = /** @class */ (function () {
    function LoadingBarHttpClientModule() {
    }
LoadingBarHttpClientModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: LoadingBarHttpClientModule });
LoadingBarHttpClientModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function LoadingBarHttpClientModule_Factory(t) { return new (t || LoadingBarHttpClientModule)(); }, providers: [
        {
            provide: HTTP_INTERCEPTORS,
            useClass: LoadingBarInterceptor,
            multi: true
        },
    ], imports: [[HttpClientModule, LoadingBarModule], HttpClientModule, LoadingBarModule] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(LoadingBarHttpClientModule, { imports: function () { return [HttpClientModule, LoadingBarModule]; }, exports: function () { return [HttpClientModule, LoadingBarModule]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LoadingBarHttpClientModule, [{
        type: NgModule,
        args: [{
                imports: [HttpClientModule, LoadingBarModule],
                exports: [HttpClientModule, LoadingBarModule],
                providers: [
                    {
                        provide: HTTP_INTERCEPTORS,
                        useClass: LoadingBarInterceptor,
                        multi: true
                    },
                ]
            }]
    }], function () { return []; }, null); })();
    return LoadingBarHttpClientModule;
}());
export { LoadingBarHttpClientModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC5tb2R1bGUuanMiLCJzb3VyY2VzIjpbIkBuZ3gtbG9hZGluZy1iYXIvaHR0cC1jbGllbnQvaHR0cC5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3pELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLGlCQUFpQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDM0UsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7O0FBYWxFO0FBQ21CLElBRG5CO0FBQXdDLElBQUMsQ0FBQztJQUE3QiwwQkFBMEIsd0JBWHRDLFFBQVEsQ0FBQyxjQUNSLE9BQU8sRUFBRSxDQUFDO01BQWdCLEVBQUUsZ0JBQWdCLENBQUMsY0FDN0MsT0FBTyxFQUFFLENBQUMsZ0JBQWdCLEVBQUUsZ0JBQWdCLENBQUMsY0FDN0MsU0FBUyxFQUFFLGtCQUNULHNCQUNFLE9BQU8sRUFBRSxpQkFBaUI7O0tBQzFCLFFBQVEsRUFBRSxxQkFBcUI7a0JBQy9CLEtBQUssRUFBRSxJQUFJO0dBQ1osZUFDRjtLQUNGLENBQUM7R0FDVywwQkFBMEIsQ0FBRzs7Ozs7Ozs7Ozs7Ozs7O2dEQUMxQztBQUFDLElBRHdDLGlDQUFDO0FBQ3pDLENBRHlDLEFBQTFDLElBQTBDO0FBQzFDLFNBRGEsMEJBQTBCO0FBQ3ZDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTG9hZGluZ0Jhck1vZHVsZSB9IGZyb20gJ0BuZ3gtbG9hZGluZy1iYXIvY29yZSc7XG5pbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSHR0cENsaWVudE1vZHVsZSwgSFRUUF9JTlRFUkNFUFRPUlMgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBMb2FkaW5nQmFySW50ZXJjZXB0b3IgfSBmcm9tICcuL2xvYWRpbmctYmFyLmludGVyY2VwdG9yJztcblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW0h0dHBDbGllbnRNb2R1bGUsIExvYWRpbmdCYXJNb2R1bGVdLFxuICBleHBvcnRzOiBbSHR0cENsaWVudE1vZHVsZSwgTG9hZGluZ0Jhck1vZHVsZV0sXG4gIHByb3ZpZGVyczogW1xuICAgIHtcbiAgICAgIHByb3ZpZGU6IEhUVFBfSU5URVJDRVBUT1JTLFxuICAgICAgdXNlQ2xhc3M6IExvYWRpbmdCYXJJbnRlcmNlcHRvcixcbiAgICAgIG11bHRpOiB0cnVlLFxuICAgIH0sXG4gIF0sXG59KVxuZXhwb3J0IGNsYXNzIExvYWRpbmdCYXJIdHRwQ2xpZW50TW9kdWxlIHt9XG4iXX0=