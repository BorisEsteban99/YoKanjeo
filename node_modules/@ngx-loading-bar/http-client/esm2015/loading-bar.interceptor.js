import { __decorate, __metadata } from "tslib";
import { LoadingBarService } from '@ngx-loading-bar/core';
import { Injectable } from '@angular/core';
import { finalize, tap } from 'rxjs/operators';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@ngx-loading-bar/core';
let LoadingBarInterceptor = class LoadingBarInterceptor {
    constructor(loader) {
        this.loader = loader;
    }
    intercept(req, next) {
        // https://github.com/angular/angular/issues/18155
        if (req.headers.has('ignoreLoadingBar')) {
            return next.handle(req.clone({ headers: req.headers.delete('ignoreLoadingBar') }));
        }
        let started = false;
        const ref = this.loader.useRef('http');
        return next.handle(req).pipe(tap(() => {
            if (!started) {
                ref.start();
                started = true;
            }
        }), finalize(() => started && ref.complete()));
    }
};
LoadingBarInterceptor.ɵfac = function LoadingBarInterceptor_Factory(t) { return new (t || LoadingBarInterceptor)(ɵngcc0.ɵɵinject(ɵngcc1.LoadingBarService)); };
LoadingBarInterceptor.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: LoadingBarInterceptor, factory: function (t) { return LoadingBarInterceptor.ɵfac(t); } });
LoadingBarInterceptor.ctorParameters = () => [
    { type: LoadingBarService }
];
LoadingBarInterceptor = __decorate([ __metadata("design:paramtypes", [LoadingBarService])
], LoadingBarInterceptor);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LoadingBarInterceptor, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.LoadingBarService }]; }, null); })();
export { LoadingBarInterceptor };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9hZGluZy1iYXIuaW50ZXJjZXB0b3IuanMiLCJzb3VyY2VzIjpbIkBuZ3gtbG9hZGluZy1iYXIvaHR0cC1jbGllbnQvbG9hZGluZy1iYXIuaW50ZXJjZXB0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzFELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHM0MsT0FBTyxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7O0FBRy9DLElBQWEscUJBQXFCLEdBQWxDLE1BQWEscUJBQXFCO0FBQUcsSUFDbkMsWUFBb0IsTUFBeUI7QUFBSSxRQUE3QixXQUFNLEdBQU4sTUFBTSxDQUFtQjtBQUFDLElBQUUsQ0FBQztBQUNuRCxJQUNFLFNBQVMsQ0FBQyxHQUFxQixFQUFFLElBQWlCO0FBQUksUUFDcEQsa0RBQWtEO0FBQ3RELFFBQUksSUFBSSxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFO0FBQzdDLFlBQU0sT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxPQUFPLEVBQUUsR0FBRyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsa0JBQWtCLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUN6RixTQUFLO0FBQ0wsUUFDSSxJQUFJLE9BQU8sR0FBRyxLQUFLLENBQUM7QUFDeEIsUUFBSSxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUMzQyxRQUFJLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQzFCLEdBQUcsQ0FBQyxHQUFHLEVBQUU7QUFDZixZQUFRLElBQUksQ0FBQyxPQUFPLEVBQUU7QUFDdEIsZ0JBQVUsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ3RCLGdCQUFVLE9BQU8sR0FBRyxJQUFJLENBQUM7QUFDekIsYUFBUztBQUNULFFBQU0sQ0FBQyxDQUFDLEVBQ0YsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDLE9BQU8sSUFBSSxHQUFHLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FDMUMsQ0FBQztBQUNOLElBQUUsQ0FBQztBQUNILENBQUM7OzJKQUFBO0FBQ0Q7QUFBK0MsWUFyQmpCLGlCQUFpQjtBQUFHO0FBRHJDLHFCQUFxQixvQkFEakMsVUFBVSxFQUFFLGpCQUNULGtDQUMwQixpQkFBaUI7QUFBRyxHQURyQyxxQkFBcUIsQ0FxQmpDOzs7a0ZBQ0Q7QUFBQyxTQXRCWSxxQkFBcUI7QUFBSSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IExvYWRpbmdCYXJTZXJ2aWNlIH0gZnJvbSAnQG5neC1sb2FkaW5nLWJhci9jb3JlJztcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEh0dHBFdmVudCwgSHR0cEludGVyY2VwdG9yLCBIdHRwSGFuZGxlciwgSHR0cFJlcXVlc3QgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBmaW5hbGl6ZSwgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTG9hZGluZ0JhckludGVyY2VwdG9yIGltcGxlbWVudHMgSHR0cEludGVyY2VwdG9yIHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBsb2FkZXI6IExvYWRpbmdCYXJTZXJ2aWNlKSB7fVxuXG4gIGludGVyY2VwdChyZXE6IEh0dHBSZXF1ZXN0PGFueT4sIG5leHQ6IEh0dHBIYW5kbGVyKTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8YW55Pj4ge1xuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIvaXNzdWVzLzE4MTU1XG4gICAgaWYgKHJlcS5oZWFkZXJzLmhhcygnaWdub3JlTG9hZGluZ0JhcicpKSB7XG4gICAgICByZXR1cm4gbmV4dC5oYW5kbGUocmVxLmNsb25lKHsgaGVhZGVyczogcmVxLmhlYWRlcnMuZGVsZXRlKCdpZ25vcmVMb2FkaW5nQmFyJykgfSkpO1xuICAgIH1cblxuICAgIGxldCBzdGFydGVkID0gZmFsc2U7XG4gICAgY29uc3QgcmVmID0gdGhpcy5sb2FkZXIudXNlUmVmKCdodHRwJyk7XG4gICAgcmV0dXJuIG5leHQuaGFuZGxlKHJlcSkucGlwZShcbiAgICAgIHRhcCgoKSA9PiB7XG4gICAgICAgIGlmICghc3RhcnRlZCkge1xuICAgICAgICAgIHJlZi5zdGFydCgpO1xuICAgICAgICAgIHN0YXJ0ZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9KSxcbiAgICAgIGZpbmFsaXplKCgpID0+IHN0YXJ0ZWQgJiYgcmVmLmNvbXBsZXRlKCkpLFxuICAgICk7XG4gIH1cbn1cbiJdfQ==