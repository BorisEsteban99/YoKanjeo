import { __decorate } from "tslib";
import { LoadingBarModule } from '@ngx-loading-bar/core';
import { NgModule } from '@angular/core';
import { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';
import { LoadingBarInterceptor } from './loading-bar.interceptor';
import * as ɵngcc0 from '@angular/core';
let LoadingBarHttpClientModule = class LoadingBarHttpClientModule {
};
LoadingBarHttpClientModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: LoadingBarHttpClientModule });
LoadingBarHttpClientModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function LoadingBarHttpClientModule_Factory(t) { return new (t || LoadingBarHttpClientModule)(); }, providers: [
        {
            provide: HTTP_INTERCEPTORS,
            useClass: LoadingBarInterceptor,
            multi: true
        },
    ], imports: [[HttpClientModule, LoadingBarModule], HttpClientModule, LoadingBarModule] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(LoadingBarHttpClientModule, { imports: function () { return [HttpClientModule, LoadingBarModule]; }, exports: function () { return [HttpClientModule, LoadingBarModule]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LoadingBarHttpClientModule, [{
        type: NgModule,
        args: [{
                imports: [HttpClientModule, LoadingBarModule],
                exports: [HttpClientModule, LoadingBarModule],
                providers: [
                    {
                        provide: HTTP_INTERCEPTORS,
                        useClass: LoadingBarInterceptor,
                        multi: true
                    },
                ]
            }]
    }], null, null); })();
export { LoadingBarHttpClientModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC5tb2R1bGUuanMiLCJzb3VyY2VzIjpbIkBuZ3gtbG9hZGluZy1iYXIvaHR0cC1jbGllbnQvaHR0cC5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3pELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLGlCQUFpQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDM0UsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7O0FBYWxFLElBQWEsMEJBQTBCLEdBQXZDLE1BQWEsMEJBQTBCO0FBQUcsQ0FBQSxDQUFBO0FBQTdCLDBCQUEwQixvQkFYdEMsUUFBUSxDQUFDLFVBQ1IsT0FBTyxFQUFFLENBQUMsZ0JBQWdCLEVBQUU7WUFBZ0IsQ0FBQyxVQUM3QyxPQUFPLEVBQUUsQ0FBQyxnQkFBZ0IsRUFBRSxnQkFBZ0IsQ0FBQyxVQUM3QyxTQUFTLEVBQUUsY0FDVCxrQkFDRSxPQUFPLEVBQUUsaUJBQWlCLGtCQUMxQixRQUFRLEVBQUU7O0lBQXFCLGtCQUMvQixLQUFLLEVBQUUsSUFBSTtRQUNaLFdBQ0YsT0FDRixDQUFDLElBQ1c7WUFBMEIsQ0FBRzs7Ozs7Ozs7Ozs7Ozs7Ozs7MEJBQzFDO0FBQUMsU0FEWSwwQkFBMEI7QUFDdkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBMb2FkaW5nQmFyTW9kdWxlIH0gZnJvbSAnQG5neC1sb2FkaW5nLWJhci9jb3JlJztcbmltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBIdHRwQ2xpZW50TW9kdWxlLCBIVFRQX0lOVEVSQ0VQVE9SUyB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IExvYWRpbmdCYXJJbnRlcmNlcHRvciB9IGZyb20gJy4vbG9hZGluZy1iYXIuaW50ZXJjZXB0b3InO1xuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzOiBbSHR0cENsaWVudE1vZHVsZSwgTG9hZGluZ0Jhck1vZHVsZV0sXG4gIGV4cG9ydHM6IFtIdHRwQ2xpZW50TW9kdWxlLCBMb2FkaW5nQmFyTW9kdWxlXSxcbiAgcHJvdmlkZXJzOiBbXG4gICAge1xuICAgICAgcHJvdmlkZTogSFRUUF9JTlRFUkNFUFRPUlMsXG4gICAgICB1c2VDbGFzczogTG9hZGluZ0JhckludGVyY2VwdG9yLFxuICAgICAgbXVsdGk6IHRydWUsXG4gICAgfSxcbiAgXSxcbn0pXG5leHBvcnQgY2xhc3MgTG9hZGluZ0Jhckh0dHBDbGllbnRNb2R1bGUge31cbiJdfQ==